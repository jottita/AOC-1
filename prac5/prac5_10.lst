


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000         ;TODO EL MOVIEMIENTO(dirx y diry) SE PODRIA HACER CON UN
                       A UNICA VARIABLE PARA CADA JUGADOR CON UN NUMERO DEL 0-3
                        
    3 00000000         ;REPRESENTADO CADA UNO UNA DIRECCIÓN{0 =IZQ,1=DER,2=ARRI
                       BA,3=ABAJO POR EJEMPLO}
    4 00000000         ;NO LO HE HECHO DE ESTA FORMA PORQUE SEGUI EL ESQUEMA QU
                       E SE NOS FACILITA Y
    5 00000000         ;SE ME OCURRIO CUANDO YA TENÍA GRAN PARTE DEL PROYECYO H
                       ECHO PERO CREO QUE SERIA MÁS SENCILLO DE ESA FORMA
    6 00000000 00000000 
                       reloj   DCD              0           ;contador de centes
                                                            imas de segundo
    7 00000004 00000020 
                       max     DCD              32          ;velocidad de movim
                                                            iento (en centesima
                                                            s s.)
    8 00000008 00000020 
                       velocidad
                               DCD              32          ; auxilar que cambi
                                                            a la vel
    9 0000000C 00000000 
                       mover   DCD              0           ;indica si hay que 
                                                            moverse
   10 00000010 00000000 
                       dir1x   DCD              0           ;mov. horizontal ju
                                                            gador1 (-1 izq,0 co
                                                            l fija,1 der) 
   11 00000014 00000000 
                       dir1y   DCD              0           ;mov. vertical juga
                                                            dor1 (-1 arriba,0 f
                                                            ila fija,1 abajo)
   12 00000018 00000000 
                       dir2x   DCD              0           ;mov. horizontal ju
                                                            gador2 (-1 izq.,0 c
                                                            ol fija,1 der)
   13 0000001C 00000000 
                       dir2y   DCD              0           ;mov. vertical juga
                                                            dor2 (-1 arriba,0 f
                                                            ila fija,1 abajo)
   14 00000020 00      fin     DCB              0           ;indicador fin de p
                                                            rograma (si vale 1)
                                                            
   15 00000021 E0010000 
                       R_DAT   EQU              0xE0010000  ;Registro de datos 
                                                            donde se guarda el 
                                                            ascii de la tecla p
                                                            ulsada
   16 00000021 E0004000 
                       T0_IR   EQU              0xE0004000  ;EOI del timer
   17 00000021 40007E00 
                       ARRIBA  EQU              0x40007E00  ;Limite por arriba 
                                                            
   18 00000021 40007FFF 
                       ABAJO   EQU              0x40007FFF  ;Limite por abajo
   19 00000021 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010  ;act. Irqs (solo 1’
                                                            s)



ARM Macro Assembler    Page 2 


   20 00000021 FFFFF014 
                       VICIntEnClr
                               EQU              0xFFFFF014  ;desact. IRQs (solo
                                                             1’s)
   21 00000021 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100  ;vector interr. (VI
                                                            )
   22 00000021 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030  ;reg. para EOI
   23 00000021 20202020 
                       VACIO   EQU              0x20202020
   24 00000021 00 00 00 
              00000000 reloj_so
                               DCD              0           ;var. para @RSI_tim
                                                            er_SO 
   25 00000028 00000000 
                       teclado_so
                               DCD              0           ;var. para @RSI_tec
                                                            lado_SO 
   26 0000002C 00000022 
                       semilla DCD              0x000000022 ;semilla incializad
                                                            a
   27 00000030 00000000 
                       posicion1
                               DCD              0           ;posicion del perso
                                                            naje 1
   28 00000034 00000000 
                       posicion2
                               DCD              0           ;posicion del perso
                                                            naje 2
   29 00000038 00000000 
              00000000 
              00000000 pos_pos DCD              0,0,0       ; vector de posible
                                                            s posciones cuando 
                                                            el jugador se encue
                                                            ntra con una colisi
                                                            on 
   30 00000044 00000000 
                       colis   DCD              0           ; define si hay una
                                                             colision
   31 00000048 00000000 
              00000000 marcador
                               DCD              0,0         ; marcadores de los
                                                             dos pj 
   32 00000050         ; MENSAJES PARA IMPRIMIR POR PANTALLA
   33 00000050 6A 75 67 
              61 64 6F 
              72 20 58 
              7C       cabecera
                               DCB              106,117,103,97,100,111,114,32,8
8,124
   34 0000005A 0B      tam_cab DCB              11          ; tamaño del mensaj
                                                            e de cabecera
   35 0000005B 47 41 4E 
              41 44 4F 
              52 20 4A 
              55 47 41 



ARM Macro Assembler    Page 3 


              44 4F 52 
              20       pantalla_fin
                               DCB              71,65,78,65,68,79,82,32,74,85,7
1,65,68,79,82,32 
                                                            ; Ganador jugador
   36 0000006B 10      tam_pf  DCB              16
   37 0000006C 47 41 4D 
              45 20 4F 
              56 45 52 
              2E       game_over
                               DCB              71,65,77,69,32,79,86,69,82,46 
                                                            ; Game over
   38 00000076 0A      tam_go  DCB              10
   39 00000077         ;posibles modificaciones para el 10 -> quitar cola,poner
                        pantalla de volver a jugar + poner marcador
   40 00000077         
   41 00000077         
   42 00000077                 AREA             codigo,CODE
   43 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   44 00000000                 IMPORT           srand       ; para poder invoca
                                                            r SBR srand
   45 00000000                 IMPORT           rand        ; para poder invoca
                                                            r SBR rand
   46 00000000         
   47 00000000         inicio
   48 00000000         
   49 00000000 E59F060C        LDR              r0,=VICVectAddr0 ;salva guarda 
                                                            de la timer del sis
                                                            tema operativo
   50 00000004 E59F160C        LDR              r1,=reloj_so
   51 00000008 E3A02004        mov              r2,#4
   52 0000000C E7903102        ldr              r3,[r0,r2,LSL #2]
   53 00000010 E5813000        str              r3,[r1]
   54 00000014         
   55 00000014 E59F05F8        LDR              r0,=VICVectAddr0 ;salva guarda 
                                                            de la teclado del s
                                                            istema operativo
   56 00000018 E59F15FC        LDR              r1,=teclado_so
   57 0000001C E3A02007        mov              r2,#7
   58 00000020 E7903102        ldr              r3,[r0,r2,LSL #2]
   59 00000024 E5813000        str              r3,[r1]
   60 00000028         
   61 00000028         
   62 00000028 E59F15F0        LDR              r1,=RSI_reloj ; programar @IRQ4
                                                             -> RSI_reloj
   63 0000002C E3A02004        mov              r2,#4
   64 00000030 E7801102        str              r1,[r0,r2,LSL #2] ; Guardamos R
                                                            SI_reloj en la posi
                                                            ción 4 de vector Ad
                                                            dr
   65 00000034 E59F15E8        LDR              r1,=RSI_teclado ; programar @IR
                                                            Q7 -> RSI_teclado
   66 00000038 E3A02007        mov              r2,#7
   67 0000003C E7801102        str              r1,[r0,r2,LSL #2] ; Guardamos R
                                                            SI_reloj en la posi
                                                            ción 7 de vector Ad
                                                            dr
   68 00000040         



ARM Macro Assembler    Page 4 


   69 00000040 E59F05E0        LDR              r0,=VICIntEnable 
                                                            ; activar IRQ4,IRQ7
                                                            
   70 00000044 E3A01090        mov              r1,#2_10010000
   71 00000048 E5801000        str              r1,[r0]
   72 0000004C         
   73 0000004C E59F05D8 
                       rerun   LDR              r0,=semilla ;  llamanda a srand
                                                            
   74 00000050 E5900000        ldr              r0,[r0]
   75 00000054 E52D0004        PUSH{r0}
   76 00000058 EBFFFFFE        bl               srand
   77 0000005C E28DD004        add              sp,sp,#4
   78 00000060         
   79 00000060 EB000076        bl               borra_pant  ; subrutina para po
                                                            ner la pantalla en 
                                                            blanco      ; dibuj
                                                            ar pantalla inicial
                                                            
   80 00000064 E59F05C4        LDR              r0,=ARRIBA
   81 00000068 E2800001        add              r0,r0,#1
   82 0000006C E59F15C0        ldr              r1,=cabecera
   83 00000070 E59F25C0        ldr              r2,=tam_cab
   84 00000074 E5922000        ldr              r2,[r2]
   85 00000078         
   86 00000078 E92D0007        push{r0,r1,r2}
   87 0000007C EB000064        bl               imp_mensaje
   88 00000080 E28DD00C        add              sp,sp,#12
   89 00000084 EA000055        b                desactivar
   90 00000088         ; POSICION Y MOVIMIENTO PJ1
   91 00000088 E24DD004        sub              sp,sp,#4    ; añadimos un hueco
                                                             para el resultado
   92 0000008C EBFFFFFE        bl               rand
   93 00000090 E49D0004        pop{r0}                      ; r0= numero aleato
                                                            rio sin limitar
   94 00000094         
   95 00000094 E3A01C02        mov              r1,#512
   96 00000098 E2411001        sub              r1,r1,#1    ; r1 = 511 
   97 0000009C E0000001        and              r0,r0,r1    ; r0 = primero 9 bi
                                                            ts del numero aleat
                                                            orio
   98 000000A0 E59F1594        ldr              r1,=dir1x   ; r1 =@dirx
   99 000000A4 E59F2594        ldr              r2,=dir1y   ; r2 =@diry
  100 000000A8 E59F3594        ldr              r3,=posicion1 ; r3 =@posicion
  101 000000AC E3A04058        mov              r4,#'X'     ; r4 = X
  102 000000B0         
  103 000000B0 E92D001F        push{r0,r1,r2,r3,r4}         ; pasamos {9 bits,@
                                                            dirx,@diry,@posicio
                                                            n}
  104 000000B4 EB00006B        bl               tab_inicial ; subrutina que nos
                                                             configur la primer
                                                            a posicion y moviem
                                                            into aleatorio del 
                                                            personaje
  105 000000B8 E28DD010        add              sp,sp,#16
  106 000000BC         
  107 000000BC         
  108 000000BC E24DD004        sub              sp,sp,#4    ; POSICION Y MOVIMI
                                                            ENTO PJ2



ARM Macro Assembler    Page 5 


  109 000000C0 EBFFFFFE        bl               rand
  110 000000C4 E49D0004        pop{r0}                      ; r0= numero aleato
                                                            rio nuevo sin limit
                                                            ar
  111 000000C8         
  112 000000C8 E3A01C02        mov              r1,#512
  113 000000CC E2411001        sub              r1,r1,#1    ; r1= 511
  114 000000D0 E0000001        and              r0,r0,r1    ; r0 = primero 9 bi
                                                            ts del numero aleat
                                                            orio
  115 000000D4 E59F156C        ldr              r1,=dir2x   ; r1 =@dirx
  116 000000D8 E59F256C        ldr              r2,=dir2y   ; r2 =@diry
  117 000000DC E59F356C        ldr              r3,=posicion2 ; r3 =@posicion 
  118 000000E0 E3A0404F        mov              r4,#'O'     ; r4 = O   
  119 000000E4         
  120 000000E4 E92D001F        push{r0,r1,r2,r3,r4}         ; pasamos {9 bits,@
                                                            dirx,@diry,@posicio
                                                            n,letra,caracter}
  121 000000E8 EB00005E        bl               tab_inicial ; subrutina que nos
                                                             configur la primer
                                                            a posicion y moviem
                                                            into aleatorio del 
                                                            personaje
  122 000000EC E28DD010        add              sp,sp,#16
  123 000000F0         
  124 000000F0         
  125 000000F0         
  126 000000F0 E59F055C        LDR              r0, =fin    ; r0 = @fin
  127 000000F4 E59F155C        LDR              r1, =mover  ; r1 = @mover
  128 000000F8         
  129 000000F8 E5902000 
                       bucle   ldr              r2,[r0]     ;r2 = fin
  130 000000FC E3520001        cmp              r2,#1       ; si fin == 1
  131 00000100 0A000023        beq              gameover    ;  salto a desactiv
                                                            ar
  132 00000104         ; sino
  133 00000104 E5912000        ldr              r2,[r1]     ;   r2 = mover
  134 00000108 E3520001        cmp              r2,#1       ;  si mover != 1
  135 0000010C 1AFFFFF9        bne              bucle       ;   salta a bucle
  136 00000110         ; si no:
  137 00000110         
  138 00000110         ;MOVIMIENTO DE PERSONAJE 1
  139 00000110         
  140 00000110 E59F252C 
                       jugador1
                               ldr              r2, =posicion1 
                                                            ; r2 = @posicion1
  141 00000114 E59F3520        ldr              r3, =dir1x  ; r3 = @dir1x
  142 00000118 E59F4520        ldr              r4, =dir1y  ; r4 = @dir1y
  143 0000011C E59F5538        ldr              r5, =colis  ; r5 = @colis
  144 00000120 E59F6538        ldr              r6, =pos_pos ; r6 = @pos_pos
  145 00000124         
  146 00000124 E24DD004        sub              sp,sp,#4    ; dejamos espacio p
                                                            ara el resultado de
                                                             las subrutina
  147 00000128 E92D007C        push{r2-r6}                  ; pasamos los param
                                                            etros//posicion,dir
                                                            x,diry,colis,pos_po
                                                            s



ARM Macro Assembler    Page 6 


  148 0000012C EB00006A        bl               movimiento  ;
  149 00000130 E28DD014        add              sp,sp,#20   ; desapilamos los p
                                                            arametro que no nos
                                                             interesa recuperar
                                                            
  150 00000134 E49D7004        pop{r7}                      ; cargamos el resul
                                                            tado en r2
  151 00000138 E3570001        cmp              r7,#1       ; si el resultado =
                                                             1
  152 0000013C 03A07032        moveq            r7,#50      ;  r7 = 2 porque si
                                                             no encuentra movim
                                                            iento gana el jugad
                                                            or 2
  153 00000140 0A000013        beq              gameover    ; fin del prgrama(n
                                                            o hya movimientos p
                                                            osibles)
  154 00000144         
  155 00000144 E5927000        ldr              r7,[r2]
  156 00000148 E3A08058        mov              r8,#'X'     ; pintarlo
  157 0000014C E5C78000        strb             r8,[r7]     ;   
  158 00000150         
  159 00000150 E59F24F8 
                       jugador2
                               ldr              r2, =posicion2 
                                                            ; r2 = @posicion1
  160 00000154 E59F34EC        ldr              r3, =dir2x  ; r3 = @dir1x
  161 00000158 E59F44EC        ldr              r4, =dir2y  ; r4 = @dir1y
  162 0000015C         
  163 0000015C E24DD004        sub              sp,sp,#4    ; dejamos espacio p
                                                            ara el resultado de
                                                             las subrutina
  164 00000160 E92D007C        push{r2-r6}                  ; pasamos los param
                                                            etros
  165 00000164 EB00005C        bl               movimiento  ;
  166 00000168 E28DD014        add              sp,sp,# 20  ; desapilamos los p
                                                            arametro que no nos
                                                             interesa recuperar
                                                            
  167 0000016C E49D7004        pop{r7}                      ; cargamos el resul
                                                            tado en r2
  168 00000170 E3570001        cmp              r7,#1       ; si el resultado =
                                                             1
  169 00000174 03A07031        moveq            r7,#49
  170 00000178 0A000005        beq              gameover    ; fin del prgrama(n
                                                            o hya movimientos p
                                                            osibles)
  171 0000017C         ;  r7 = 1 porque si no encuentra movimiento gana el juga
                       dor 1
  172 0000017C         
  173 0000017C E5927000        ldr              r7,[r2]
  174 00000180 E3A0804F        mov              r8,#'O'     ; pintarlo
  175 00000184 E5C78000        strb             r8,[r7]     ;    
  176 00000188         
  177 00000188         
  178 00000188 E0277007        eor              r7,r7,r7    ;  r7 = 0
  179 0000018C E5817000        str              r7,[r1]     ;  mover = 0
  180 00000190         
  181 00000190         
  182 00000190 EAFFFFD8        b                bucle



ARM Macro Assembler    Page 7 


  183 00000194         gameover
  184 00000194 EB000029        bl               borra_pant  ; subrutina para po
                                                            ner la pantalla en 
                                                            blanco
  185 00000198 E59F0490        LDR              r0,=ARRIBA
  186 0000019C E28000A2        add              r0,r0,#162
  187 000001A0 E59F14BC        ldr              r1,=game_over
  188 000001A4 E59F24BC        ldr              r2,=tam_go
  189 000001A8 E5922000        ldr              r2,[r2]
  190 000001AC         
  191 000001AC E92D0007        push{r0,r1,r2}
  192 000001B0 EB000017        bl               imp_mensaje
  193 000001B4 E28DD00C        add              sp,sp,#12
  194 000001B8 E3570000        cmp              r7,#0
  195 000001BC 0A000007        beq              desactivar
  196 000001C0         
  197 000001C0         gandor
  198 000001C0         
  199 000001C0         
  200 000001C0 E0800002        add              r0,r0,r2
  201 000001C4 E59F14A0        ldr              r1,=pantalla_fin
  202 000001C8 E5C1701B        strb             r7,[r1,#27] ; añades el 1 o el 
                                                            2
  203 000001CC E59F249C        ldr              r2,=tam_pf
  204 000001D0 E5922000        ldr              r2,[r2]
  205 000001D4         
  206 000001D4 E92D0007        push{r0,r1,r2}
  207 000001D8 EB00000D        bl               imp_mensaje
  208 000001DC E28DD00C        add              sp,sp,#12
  209 000001E0         
  210 000001E0         
  211 000001E0         
  212 000001E0 E59F048C 
                       desactivar
                               LDR              r0,=VICIntEnClr ;desactivar IRQ
                                                            4,IRQ7
  213 000001E4 E3A01090        mov              r1,#2_10010000
  214 000001E8 E5801000        str              r1,[r0]
  215 000001EC         
  216 000001EC E59F0420        ldr              r0,=VICVectAddr0 ; r0 = @VICVec
                                                            tAddr0
  217 000001F0 E59F1420        LDR              r1,=reloj_so ; recuperacion rel
                                                            oj_so; r1 = @reloj_
                                                            so
  218 000001F4 E5911000        ldr              r1,[r1]     ; r1 = reloj_so
  219 000001F8 E3A02004        mov              r2,#4       ; 
  220 000001FC E7801202        str              r1,[r0,r2,LSL#4] ; VI[4]=@RSI_r
                                                            eloj_SO
  221 00000200         
  222 00000200 E59F1414        LDR              r1,=teclado_so ; recuperacion r
                                                            eloj_so; r0 = @tecl
                                                            ado_so
  223 00000204 E5911000        ldr              r1,[r1]     ; r1 = teclado_so
  224 00000208 E3A02007        mov              r2,#7
  225 0000020C E7801202        str              r1,[r0,r2,LSL#4] ; VI[7]=@RSI_t
                                                            eclado_SO
  226 00000210         
  227 00000210 EAFFFFFE 
                       bfin    b                bfin



ARM Macro Assembler    Page 8 


  228 00000214         
  229 00000214 E92D4800 
                       imp_mensaje
                               push{lr,fp}
  230 00000218 E1A0B00D        mov              fp,sp
  231 0000021C E92D000F        push{r0-r3}
  232 00000220         
  233 00000220         
  234 00000220 E59B0008        ldr              r0,[fp,#8]  ; memoria donde emp
                                                            ezar mensaje
  235 00000224 E59B100C        ldr              r1,[fp,#12] ; primer @ del vect
                                                            ore del mensaje
  236 00000228 E59B2010        ldr              r2,[fp,#16] ; tamaño del mensaj
                                                            e
  237 0000022C         
  238 0000022C E4D13001 
                       escribir
                               ldrb             r3,[r1],#1  ; escribimos bit a 
                                                            bit el mensaje
  239 00000230 E4C03001        strb             r3,[r0],#1
  240 00000234 E2522001        subs             r2,r2,#1
  241 00000238 1AFFFFFB        bne              escribir
  242 0000023C         
  243 0000023C E8BD880F        pop{r0-r3,fp,pc}
  244 00000240         
  245 00000240         borra_pant
  246 00000240 E92D4800        push{lr,fp}
  247 00000244 E1A0B00D        mov              fp,sp
  248 00000248 E92D0007        push{r0-r2}
  249 0000024C E59F03DC        LDR              r0,=ARRIBA
  250 00000250 E59F1420        LDR              r1,=VACIO
  251 00000254 E3A02080        mov              r2,#128
  252 00000258         
  253 00000258 E4801004 
                       borra   str              r1,[r0],#4
  254 0000025C E2522001        subs             r2,r2,#1
  255 00000260 1AFFFFFC        bne              borra
  256 00000264         
  257 00000264 E8BD8807        pop{r0-r2,fp,pc}
  258 00000268         
  259 00000268         
  260 00000268         tab_inicial
  261 00000268 E92D4800        push{lr,fp}
  262 0000026C E1A0B00D        mov              fp,sp
  263 00000270 E92D001F        push{r0-r4}
  264 00000274         
  265 00000274 E59B0008        ldr              r0,[fp,#8]  ;r0 = 9 bits
  266 00000278 E59B1014        ldr              r1,[fp,#20] ;r1 = posicion
  267 0000027C E59B200C        ldr              r2,[fp,#12] ;r2 = dirx
  268 00000280         
  269 00000280 E3A0307F        mov              r3,#127
  270 00000284 E1500003        cmp              r0,r3       ; 0-127 = izq,128-2
                                                            55 = dch,255-383 = 
                                                            arriba,384-511 = ab
                                                            ajo
  271 00000288 D3E04000        movle            r4,#-1      ; si r0 <= 127 --> 
                                                            4 = -1
  272 0000028C DA00000B        ble              mov_ini
  273 00000290         



ARM Macro Assembler    Page 9 


  274 00000290 E2833080        add              r3,#128
  275 00000294 E1500003        cmp              r0,r3
  276 00000298 D3A04001        movle            r4,#1       ; si r10 <=255  -->
                                                             r4 =  1
  277 0000029C DA000007        ble              mov_ini
  278 000002A0         
  279 000002A0 E59B2010        ldr              r2,[fp,#16] ;r2 = @diry
  280 000002A4         
  281 000002A4 E2833080        add              r3,#128
  282 000002A8 E1500003        cmp              r0,r3
  283 000002AC D3E0401F        movle            r4,#-32     ; si r0 <= 383 --> 
                                                            r4 = -32
  284 000002B0 DA000002        ble              mov_ini
  285 000002B4         
  286 000002B4 E2833080        add              r3,#128
  287 000002B8 E1500003        cmp              r0,r3       ;      
  288 000002BC D3A04020        movle            r4,#32      ; si r0 <= 511 --> 
                                                            r4 =  31 
  289 000002C0         
  290 000002C0 E5824000 
                       mov_ini str              r4,[r2]     ; dir en r2 = r4
  291 000002C4         
  292 000002C4 E59F2364        LDR              r2,=ARRIBA  ; r2 = @ARRIBA; al 
                                                            ser una constante "
                                                            global" no la paso 
                                                            por parametro 
  293 000002C8 E0820000        add              r0,r2,r0    ; r0 = limite de ar
                                                            riba del vector + r
                                                            0(primeros 9 bit)= 
                                                            posicion elegida de
                                                            finitiva
  294 000002CC E5810000        str              r0,[r1]     ; posicion = r0(pos
                                                            icion elegida defin
                                                            itiva)
  295 000002D0 E59B2018        ldr              r2,[fp,#24] ; r2 = 'X'
  296 000002D4 E5C02000        strb             r2,[r0]     ; r2 se almacena/di
                                                            buja en r0
  297 000002D8 E8BD881F        pop{r0-r4,fp,pc}
  298 000002DC         
  299 000002DC         
  300 000002DC         
  301 000002DC         
  302 000002DC         
  303 000002DC E92D4800 
                       movimiento
                               push{lr,fp}
  304 000002E0 E1A0B00D        mov              fp,sp
  305 000002E4 E92D07FF        push{r0-r10}
  306 000002E8 E59B0008        ldr              r0,[fp,#8]  ; r0 = @posicion
  307 000002EC E59B100C        ldr              r1,[fp,#12] ; r1 = @dirx
  308 000002F0 E59B2010        ldr              r2,[fp,#16] ; r2 = @diry
  309 000002F4 E59B3014        ldr              r3,[fp,#20] ; r3 = @colis
  310 000002F8 E59B4018        ldr              r4,[fp,#24] ; r4 = @pos_pos
  311 000002FC E02AA00A        eor              r10,r10,r10 ; r10 = 0 [será don
                                                            de almacenamos si e
                                                            s game over para pa
                                                            sarlo al final como
                                                             resultado de la su
                                                            brutina]



ARM Macro Assembler    Page 10 


  312 00000300         
  313 00000300         ; realmente podrias pasar como parametro @fin, con un st
                       ore modificarlo directamente y
  314 00000300         ; hacer que la subrutina no tuviese resultado, pero al f
                       inal 
  315 00000300         ; se usan los mismos registros asi que me queda con esta
                        porque era la que ya tenia implementada.
  316 00000300         
  317 00000300 E5905000        ldr              r5,[r0]     ; r5 = posicion1
  318 00000304 E5916000        ldr              r6,[r1]     ; r6 = dir1x
  319 00000308 E3560000        cmp              r6,#0       ;
  320 0000030C 4A000006        bmi              izq         ; si r6 < 0 --> sal
                                                            to a izq
  321 00000310 CA00000D        bgt              dch         ; si r6 > 0 -->  sa
                                                            lto a dch
  322 00000314         
  323 00000314 E5926000        ldr              r6,[r2]     ; r6 = dir1y
  324 00000318 E3560000        cmp              r6,#0       ; si r6 == 0
  325 0000031C BA000012        blt              arriba      ; si r6 < 0 --> sal
                                                            to a arriba
  326 00000320 CA000019        bgt              abajo       ; si r6 > 0 -->  sa
                                                            lto a abajo
  327 00000324         ; si ninguno de los dos salta significa que no se ha esc
                       ogido tecla
  328 00000324 E1A06005        mov              r6,r5
  329 00000328         
  330 00000328 EA000052        b                fin_mov     ;seguir direccion a
                                                            nterior
  331 0000032C         ; r5 = posicion1
  332 0000032C         izq
  333 0000032C E2456001        sub              r6,r5,#1    ; r6 = r5 - 1(dir1x
                                                            )
  334 00000330 E206701F        and              r7, r6, #31 ; r7 = r6(posible p
                                                            osicion final) and 
                                                            31(numero de column
                                                            as)
  335 00000334 E357001F        cmp              r7,#31      ; si r7 == 31
  336 00000338 0285601F        addeq            r6,r5,#31   ;  r6 = r5(pos inic
                                                            ial) - 31(una fila 
                                                            entera)
  337 0000033C E5937000        ldr              r7,[r3]     ; r7 = colis
  338 00000340 E3570001        cmp              r7,#1
  339 00000344 0A000029        beq              col_izq
  340 00000348 EA000016        b                colision
  341 0000034C         
  342 0000034C E2856001 
                       dch     add              r6,r5,#1    ; r6 = r5 + 1(dir1x
                                                            )
  343 00000350 E206701F        and              r7,r6,#31   ; r7 = r6(posible p
                                                            osicion final) and 
                                                            31(numero de column
                                                            as
  344 00000354 E3570000        cmp              r7,#0       ; si r7 == 0
  345 00000358 0245601F        subeq            r6,r5,#31   ;  r6 = r5(pos inic
                                                            ial) - 31(una fila 
                                                            entera) 
  346 0000035C E5937000        ldr              r7,[r3]     ; r7 = colis
  347 00000360 E3570001        cmp              r7,#1
  348 00000364 0A000026        beq              col_dch



ARM Macro Assembler    Page 11 


  349 00000368 EA00000E        b                colision
  350 0000036C         
  351 0000036C         arriba
  352 0000036C E2456020        sub              r6,r5,#32   ; r6 = r5 - 32(dir1
                                                            y)
  353 00000370 E59F72B8        ldr              r7,=ARRIBA  ; si no: r7 = @ARRI
                                                            BA
  354 00000374 E1570006        cmp              r7,r6       ; si r7 > r6
  355 00000378 82866C02        addhi            r6,r6,#512  ;  r8 = r8 + 512(un
                                                             tablero entero)
  356 0000037C E5937000        ldr              r7,[r3]     ; r7 = colis
  357 00000380 E3570001        cmp              r7,#1
  358 00000384 0A00000F        beq              col_ar
  359 00000388 EA000006        b                colision
  360 0000038C         
  361 0000038C E2856020 
                       abajo   add              r6,r5,#32   ;r6 = r5 + 32(dir1y
                                                            )
  362 00000390 E59F72E4        ldr              r7,=ABAJO   ; si no: r7 = @ABAJ
                                                            O
  363 00000394 E1560007        cmp              r6,r7       ; si r6 > r7
  364 00000398 82466C02        subhi            r6,r6,#512  ;  r6 = r6 - 512(un
                                                             tablero entero)
  365 0000039C E5937000        ldr              r7,[r3]     ; r7 = colis
  366 000003A0 E3570001        cmp              r7,#1
  367 000003A4 0A00000C        beq              col_ab
  368 000003A8         
  369 000003A8         
  370 000003A8         
  371 000003A8         
  372 000003A8         colision
  373 000003A8         
  374 000003A8 E5D67000        ldrb             r7,[r6]     ; r7 = ascii que ha
                                                            y en r6(posible pos
                                                            icion final )
  375 000003AC E3570020        cmp              r7,#32      ; si r7 != 32(space
                                                             en ascii)
  376 000003B0 0A000030        beq              fin_mov     ; hay colision
  377 000003B4         
  378 000003B4 E3A07001        mov              r7,#1       ;
  379 000003B8 E5837000        str              r7,[r3]     ; colis = 1  
  380 000003BC E0288008        eor              r8,r8,r8    ; r8 = 0
  381 000003C0 E1A09004        mov              r9,r4       ; r9 = @pos_pos; ha
                                                            cemos esto porque v
                                                            amos a modificar la
                                                             @ en r9 pero neces
                                                            itamos la principal
                                                             r4 intacta
  382 000003C4         
  383 000003C4         ;ARRIBA  
  384 000003C4 EAFFFFE8        b                arriba
  385 000003C8 E5D67000 
                       col_ar  ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  386 000003CC E3570020        cmp              r7,#32      ; si r7 == 32
  387 000003D0 02888001        addeq            r8,r8,#1    ;  r8++
  388 000003D4 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  389 000003D8         



ARM Macro Assembler    Page 12 


  390 000003D8         ;ABAJO
  391 000003D8 EAFFFFEB        b                abajo
  392 000003DC E5D67000 
                       col_ab  ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  393 000003E0 E3570020        cmp              r7,#32      ; si r7 == 32
  394 000003E4 02888001        addeq            r8,r8,#1    ;  r8++
  395 000003E8 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  396 000003EC         
  397 000003EC         ;IZQUIERDA
  398 000003EC EAFFFFCE        b                izq
  399 000003F0 E5D67000 
                       col_izq ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  400 000003F4 E3570020        cmp              r7,#32      ; si r7 == 32
  401 000003F8 02888001        addeq            r8,r8,#1    ;  r8++
  402 000003FC 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  403 00000400         
  404 00000400         ;DERECHA
  405 00000400 EAFFFFD1        b                dch
  406 00000404 E5D67000 
                       col_dch ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  407 00000408 E3570020        cmp              r7,#32      ; si r7 == 32
  408 0000040C 02888001        addeq            r8,r8,#1    ;  r8++
  409 00000410 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  410 00000414         
  411 00000414 E3580001        cmp              r8,#1
  412 00000418 03A06000        moveq            r6,#0
  413 0000041C 0A000006        beq              unico
  414 00000420 B3A0A001        movlt            r10,#1
  415 00000424 B58BA01C        strlt            r10,[fp,#28] ; cargas si es gam
                                                            e over en el result
                                                            ado 
  416 00000428 BA000012        blt              fin_mov     ; fin del juego, ha
                                                            y un ganador;METERL
                                                            E RESULTADO
  417 0000042C         
  418 0000042C E24DD004        sub              sp,sp,#4    ; añadimos un hueco
                                                             para el resultado
  419 00000430 EBFFFFFE        bl               rand
  420 00000434 E49D7004        pop{r7}                      ; r7 = numero aleat
                                                            orio
  421 00000438 E2076001        and              r6, r7,#1   ; r6  r7 and 1 para
                                                             coger un bit
  422 0000043C         
  423 0000043C         unico
  424 0000043C E7946106        ldr              r6,[r4,r6,LSL#2] ; r6 = r4[r6] 
                                                            = a la posicion gua
                                                            rdad en streq
  425 00000440 E3A08000        mov              r8,#0       ; r8 = 0
  426 00000444 E5838000        str              r8,[r3]     ; colis = r8
  427 00000448         
  428 00000448 E3A07000        mov              r7,#0
  429 0000044C E0467005        sub              r7,r6,r5    ; r7 = posicion cor
                                                            regida - posicion i



ARM Macro Assembler    Page 13 


                                                            nicial = {1,-1,32,-
                                                            32}
  430 00000450 E3570001        cmp              r7,#1       ; si r7 >= 1 solo p
                                                            uede ser abajo o de
                                                            recha
  431 00000454 05817000        streq            r7,[r1]     ; posicionx = r7   
                                                            
  432 00000458 05828000        streq            r8,[r2]     ; posiciony = 0
  433 0000045C C5827000        strgt            r7,[r2]     ; posiciony = r7
  434 00000460 C5818000        strgt            r8,[r1]     ; posicionx = 0
  435 00000464 E3770001        cmp              r7,#-1      ; si r7 <= -1 solo 
                                                            puede ser arriba o 
                                                            izquierda
  436 00000468 05817000        streq            r7,[r1]     ; posicionx = r7   
                                                            
  437 0000046C 05828000        streq            r8,[r2]     ; posiciony = 0
  438 00000470 B5827000        strlt            r7,[r2]     ; posiciony = r7
  439 00000474 B5818000        strlt            r8,[r1]     ; posicionx = 0  
  440 00000478         
  441 00000478         
  442 00000478 E35A0001 
                       fin_mov cmp              r10,#1      ; si no es gameover
                                                             r8 != 1
  443 0000047C 15806000        strne            r6,[r0]     ;   posicion = r6
  444 00000480 E8BD8FFF        pop{r0-r10,fp,pc}
  445 00000484         
  446 00000484         
  447 00000484         
  448 00000484         RSI_reloj                            ;Rutina de servicio
                                                             a la interrupcion 
                                                            IRQ4 (timer 0)
  449 00000484         ;Cada 0,01 s. llega una peticion de interrupcion
  450 00000484         ;usada la rsi timer de las notas de apoyo como referenci
                       a
  451 00000484         
  452 00000484 E24EE004        sub              lr,lr,#4    ;prologo
  453 00000488 E52DE004        PUSH             {lr}
  454 0000048C E14FE000        mrs              r14,spsr
  455 00000490 E52DE004        PUSH             {r14}
  456 00000494 E321F052        msr              cpsr_c,#2_01010010
  457 00000498         
  458 00000498 E92D000F        PUSH             {r0-r3}
  459 0000049C         
  460 0000049C E59F01DC        LDR              r0,=T0_IR   ;EOI: escribir un 1
                                                             en el registro T0_
                                                            IR
  461 000004A0 E3A01001        mov              r1,#1
  462 000004A4 E5801000        str              r1,[r0]
  463 000004A8         
  464 000004A8 E59F01D4        ldr              r0,=reloj   ; r0 = @reloj
  465 000004AC E5901000        ldr              r1,[r0]     ; r1 = reloj
  466 000004B0 E2811001        add              r1,r1,#1    ; r1++
  467 000004B4 E59F21CC        ldr              r2,= max    ; r2 = @max
  468 000004B8 E5923000        ldr              r3,[r2]     ; r3 = max
  469 000004BC E1510003        cmp              r1,r3       ; si r1(reloj) == r
                                                            3(max)
  470 000004C0 1A000007        bne              fin_reloj
  471 000004C4 E59F11C0        ldr              r1,=velocidad ; r1 = @veolcidad
                                                            



ARM Macro Assembler    Page 14 


  472 000004C8 E5911000        ldr              r1,[r1]     ; r1 = velocidad
  473 000004CC E1510003        cmp              r1,r3       ; si r1 != r2
  474 000004D0 15821000        strne            r1,[r2]     ;  max = velocidad 
                                                            
  475 000004D4         
  476 000004D4         
  477 000004D4 E3A01001        mov              r1,#1       ; r2 = 1
  478 000004D8 E59F3178        ldr              r3,=mover   ;  r3 = @mover
  479 000004DC E5831000        str              r1,[r3]     ; mover = r1 = 1
  480 000004E0 E3A01000        mov              r1,#0
  481 000004E4         
  482 000004E4 E5801000 
                       fin_reloj
                               str              r1,[r0]     ; reloj = r1
  483 000004E8         
  484 000004E8 E8BD000F        POP              {r0-r3}
  485 000004EC         ;epilogo
  486 000004EC E321F0D2        msr              cpsr_c,#2_11010010
  487 000004F0 E49DE004        POP              {r14}
  488 000004F4 E16FF00E        msr              spsr_fsxc,r14
  489 000004F8 E59FE190        LDR              r14,=VICVectAddr
  490 000004FC E58EE000        str              r14,[r14]
  491 00000500 E8FD8000        POP              {pc}^
  492 00000504         
  493 00000504         
  494 00000504         RSI_teclado                          ;Rutina de servicio
                                                             a la interrupcion 
                                                            IRQ7 (teclado)
  495 00000504         ;al pulsar cada tecla llega peticion de interrupcion IRQ
                       7
  496 00000504         ;usada la rsi teclado de las notas de apoyo como referen
                       cia
  497 00000504         
  498 00000504 E24EE004        sub              lr,lr,#4    ;prologo
  499 00000508 E52DE004        PUSH             {lr}
  500 0000050C E14FE000        mrs              r14,spsr
  501 00000510 E52DE004        PUSH             {r14}
  502 00000514 E321F052        msr              cpsr_c,#2_01010010
  503 00000518 E92D001F        PUSH             {r0-r4}
  504 0000051C         
  505 0000051C E59F1170        LDR              r1,=R_DAT   ;r1=@R_DATOS teclad
                                                            o
  506 00000520 E5D10000        ldrb             r0,[r1]     ;r0=codigo ASCII te
                                                            cla, al leer se com
                                                            pleta el EOI
  507 00000524         
  508 00000524 E59F1160        LDR              r1,= velocidad 
                                                            ; r1 = @velocidad
  509 00000528 E5912000        ldr              r2,[r1]     ; r2 = velocidad
  510 0000052C E3520001        cmp              r2,#1       ; si r2 == 1
  511 00000530 0A000003        beq              max_vel     ;  solo puede ir ma
                                                            s lento, se ha alca
                                                            nzado el maximo de 
                                                            velocidad
  512 00000534 E350002B        cmp              r0,#'+'     ; si r0 == 43 = '+'
                                                             
  513 00000538 01A020A2        moveq            r2,r2,lsr#1 ;  r2 = r2/2 para q
                                                            ue se haga un movim
                                                            iento cada menos de



ARM Macro Assembler    Page 15 


                                                            cimas, disminuimos 
                                                            el numero de ticks 
                                                            necesarios para mov
                                                            erse
  514 0000053C E3520080        cmp              r2 ,#128    ; si r2 == 128
  515 00000540 0A000001        beq              act         ;  solo puede ir má
                                                            s rápido, se ha alc
                                                            anzado el minimo de
                                                             velocidad
  516 00000544 E350002D 
                       max_vel cmp              r0,#'-'     ; si r0 == 45 = '-'
                                                            
  517 00000548 01A02082        moveq            r2,r2,lsl#1 ;  r2 = r2*2 para q
                                                            ue se haga un movim
                                                            iento cada más deci
                                                            mas, aumentamos el 
                                                            numero de ticks nec
                                                            esarios para movers
                                                            e
  518 0000054C         
  519 0000054C E5812000 
                       act     str              r2,[r1]     ; max = r2
  520 00000550         
  521 00000550         
  522 00000550         ; Tratamiento: paso a mayusculas 
  523 00000550 E3C00020        bic              r0,r0,#2_100000 ; r1 = r0 and n
                                                            ot(00100000) [impor
                                                            tante --> r0 mantie
                                                            ne ascii original d
                                                            e la tecla pulsada]
                                                            
  524 00000554 E3500051        cmp              r0,#81      ; si r1 == 81 = Q
  525 00000558 1A000003        bne              sigue
  526 0000055C         
  527 0000055C E59F10F0        LDR              r1,=fin     ;  r1 = @fin
  528 00000560 E3A00001        mov              r0,#1       ; r0 = 1
  529 00000564 E5810000        str              r0,[r1]     ;  fin = r0 = 1
  530 00000568 EA000022        b                epilogo     ;  salta al epilogo
                                                            
  531 0000056C         
  532 0000056C         ;
  533 0000056C         sigue
  534 0000056C         
  535 0000056C E3500049        cmp              r0,#'I'     ; si r0 < I
  536 00000570 BA00000F        blt              p1x         ; salta al movimien
                                                            to en x del p1
  537 00000574 E350004C        cmp              r0,#'L'     ; si r0 > L
  538 00000578 CA000015        bgt              p1y         ;  salta al movimie
                                                            nto en y del p1
  539 0000057C         ; movimiento p2
  540 0000057C E59F10C4        ldr              r1,=dir2x   ; r1 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir]
  541 00000580 E59F20C4        ldr              r2,=dir2y   ; r2 = @dir2y
  542 00000584         ; si r0 == 11(L)(usamos las flags de la ultima comparaci
                       ón)
  543 00000584 03A03001        moveq            r3,#1       ;  r3 = 1(derecha)
  544 00000588 03A04000        moveq            r4,#0       ;  r4 = 0



ARM Macro Assembler    Page 16 


  545 0000058C E350004B        cmp              r0,#'K'     ; si r0 == K-> r3 =
                                                             0
  546 00000590 03A03000        moveq            r3,#0       ;   r3 = 0
  547 00000594 03A04001        moveq            r4,#1       ;  r4 = 1(abajo)   
                                                            
  548 00000598 E350004A        cmp              r0,#'J'     ; si r0 == 9(J) 
  549 0000059C 03E03000        moveq            r3,#-1      ;   r3 = -1(izq)
  550 000005A0 03A04000        moveq            r4,#0       ;  r4 = 0
  551 000005A4 E3500049        cmp              r0,#'I'     ; si r0 == 8(I)-> r
                                                            3 = 0
  552 000005A8 03A03000        moveq            r3,#0       ;   r3 = 0
  553 000005AC 03E04000        moveq            r4,#-1      ;  r4 = -1(arriba)
  554 000005B0         
  555 000005B0 EA00000E        b                act_dir     ; salto a actualiza
                                                            r direcciones
  556 000005B4         
  557 000005B4 E59F1080 
                       p1x     ldr              r1,=dir1x   ; r0 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir e
                                                            n r0]
  558 000005B8 E59F2080        ldr              r2,=dir1y   ; r2 = @dir2y 
  559 000005BC E3A04000        mov              r4,#0       ; r4 = 0 porque dir
                                                            1y siempre va a ser
                                                             0
  560 000005C0         
  561 000005C0 E3500041        cmp              r0,#'A'     ; si r1 == 0(A)
  562 000005C4 03E03000        moveq            r3,#-1      ;  r3 = -1(izquierd
                                                            a)
  563 000005C8 E3500044        cmp              r0,#'D'     ; si r1 == 3(D)
  564 000005CC 03A03001        moveq            r3,#1       ;   r3 = 1 (derecha
                                                            )
  565 000005D0 EA000006        b                act_dir     ; salto a actualiza
                                                            r direcciones
  566 000005D4         
  567 000005D4 E59F1060 
                       p1y     ldr              r1,=dir1x   ; r1 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir e
                                                            n r0]
  568 000005D8 E59F2060        ldr              r2,=dir1y   ; r2 = @dir2y
  569 000005DC E3A03000        mov              r3,#0       ; r3 = 0 porque dir
                                                            1x siempre va a ser
                                                             0
  570 000005E0         
  571 000005E0 E3500057        cmp              r0,#'W'     ; si r1 == 22(W)
  572 000005E4 03E04000        moveq            r4,#-1      ;  r4 = -1(arriba)
  573 000005E8 E3500053        cmp              r0,#'S'     ; si r1 == 18(S)
  574 000005EC 03A04001        moveq            r4,#1       ;   r4 = 1 (abajo)
  575 000005F0         
  576 000005F0 E5813000 
                       act_dir str              r3,[r1]     ; dir1x/dir2x = r3
  577 000005F4 E5824000        str              r4,[r2]     ; dir1y/dir2y = r4
  578 000005F8         
  579 000005F8 E8BD001F 
                       epilogo POP              {r0-r4}
  580 000005FC         



ARM Macro Assembler    Page 17 


  581 000005FC E321F0D2        msr              cpsr_c,#2_11010010
  582 00000600 E49DE004        POP              {r14}
  583 00000604 E16FF00E        msr              spsr_fsxc,r14
  584 00000608 E59FE080        LDR              r14,=VICVectAddr
  585 0000060C E58EE000        str              r14,[r14]
  586 00000610 E8FD8000        POP              {pc}^
  587 00000614         
  588 00000614         
  589 00000614         
  590 00000614         
  591 00000614         
  592 00000614                 END
              FFFFF100 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF010 
              00000000 
              40007E00 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF014 
              20202020 
              40007FFF 
              E0004000 
              00000000 
              00000000 
              00000000 
              FFFFF030 
              E0010000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\p
rac5_10.d -o.\prac5_10.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Inclu
de -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__UVIS
ION_VERSION SETA 526" --list=.\prac5_10.lst ..\Prac5_10\prac5_10.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

cabecera 00000050

Symbol: cabecera
   Definitions
      At line 33 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 82 in file ..\Prac5_10\prac5_10.s
Comment: cabecera used once
colis 00000044

Symbol: colis
   Definitions
      At line 30 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 143 in file ..\Prac5_10\prac5_10.s
Comment: colis used once
datos 00000000

Symbol: datos
   Definitions
      At line 1 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: datos unused
dir1x 00000010

Symbol: dir1x
   Definitions
      At line 10 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 98 in file ..\Prac5_10\prac5_10.s
      At line 141 in file ..\Prac5_10\prac5_10.s
      At line 557 in file ..\Prac5_10\prac5_10.s
      At line 567 in file ..\Prac5_10\prac5_10.s

dir1y 00000014

Symbol: dir1y
   Definitions
      At line 11 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 99 in file ..\Prac5_10\prac5_10.s
      At line 142 in file ..\Prac5_10\prac5_10.s
      At line 558 in file ..\Prac5_10\prac5_10.s
      At line 568 in file ..\Prac5_10\prac5_10.s

dir2x 00000018

Symbol: dir2x
   Definitions
      At line 12 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 115 in file ..\Prac5_10\prac5_10.s
      At line 160 in file ..\Prac5_10\prac5_10.s
      At line 540 in file ..\Prac5_10\prac5_10.s

dir2y 0000001C

Symbol: dir2y



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 13 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 116 in file ..\Prac5_10\prac5_10.s
      At line 161 in file ..\Prac5_10\prac5_10.s
      At line 541 in file ..\Prac5_10\prac5_10.s

fin 00000020

Symbol: fin
   Definitions
      At line 14 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 126 in file ..\Prac5_10\prac5_10.s
      At line 527 in file ..\Prac5_10\prac5_10.s

game_over 0000006C

Symbol: game_over
   Definitions
      At line 37 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 187 in file ..\Prac5_10\prac5_10.s
Comment: game_over used once
marcador 00000048

Symbol: marcador
   Definitions
      At line 31 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: marcador unused
max 00000004

Symbol: max
   Definitions
      At line 7 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 467 in file ..\Prac5_10\prac5_10.s
Comment: max used once
mover 0000000C

Symbol: mover
   Definitions
      At line 9 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 127 in file ..\Prac5_10\prac5_10.s
      At line 478 in file ..\Prac5_10\prac5_10.s

pantalla_fin 0000005B

Symbol: pantalla_fin
   Definitions
      At line 35 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 201 in file ..\Prac5_10\prac5_10.s
Comment: pantalla_fin used once
pos_pos 00000038




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: pos_pos
   Definitions
      At line 29 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 144 in file ..\Prac5_10\prac5_10.s
Comment: pos_pos used once
posicion1 00000030

Symbol: posicion1
   Definitions
      At line 27 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 100 in file ..\Prac5_10\prac5_10.s
      At line 140 in file ..\Prac5_10\prac5_10.s

posicion2 00000034

Symbol: posicion2
   Definitions
      At line 28 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 117 in file ..\Prac5_10\prac5_10.s
      At line 159 in file ..\Prac5_10\prac5_10.s

reloj 00000000

Symbol: reloj
   Definitions
      At line 6 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 464 in file ..\Prac5_10\prac5_10.s
Comment: reloj used once
reloj_so 00000024

Symbol: reloj_so
   Definitions
      At line 24 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 50 in file ..\Prac5_10\prac5_10.s
      At line 217 in file ..\Prac5_10\prac5_10.s

semilla 0000002C

Symbol: semilla
   Definitions
      At line 26 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 73 in file ..\Prac5_10\prac5_10.s
Comment: semilla used once
tam_cab 0000005A

Symbol: tam_cab
   Definitions
      At line 34 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 83 in file ..\Prac5_10\prac5_10.s
Comment: tam_cab used once
tam_go 00000076




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: tam_go
   Definitions
      At line 38 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 188 in file ..\Prac5_10\prac5_10.s
Comment: tam_go used once
tam_pf 0000006B

Symbol: tam_pf
   Definitions
      At line 36 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 203 in file ..\Prac5_10\prac5_10.s
Comment: tam_pf used once
teclado_so 00000028

Symbol: teclado_so
   Definitions
      At line 25 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 56 in file ..\Prac5_10\prac5_10.s
      At line 222 in file ..\Prac5_10\prac5_10.s

velocidad 00000008

Symbol: velocidad
   Definitions
      At line 8 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 471 in file ..\Prac5_10\prac5_10.s
      At line 508 in file ..\Prac5_10\prac5_10.s

24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RSI_reloj 00000484

Symbol: RSI_reloj
   Definitions
      At line 448 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 62 in file ..\Prac5_10\prac5_10.s
Comment: RSI_reloj used once
RSI_teclado 00000504

Symbol: RSI_teclado
   Definitions
      At line 494 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 65 in file ..\Prac5_10\prac5_10.s
Comment: RSI_teclado used once
abajo 0000038C

Symbol: abajo
   Definitions
      At line 361 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 326 in file ..\Prac5_10\prac5_10.s
      At line 391 in file ..\Prac5_10\prac5_10.s

act 0000054C

Symbol: act
   Definitions
      At line 519 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 515 in file ..\Prac5_10\prac5_10.s
Comment: act used once
act_dir 000005F0

Symbol: act_dir
   Definitions
      At line 576 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 555 in file ..\Prac5_10\prac5_10.s
      At line 565 in file ..\Prac5_10\prac5_10.s

arriba 0000036C

Symbol: arriba
   Definitions
      At line 351 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 325 in file ..\Prac5_10\prac5_10.s
      At line 384 in file ..\Prac5_10\prac5_10.s

bfin 00000210

Symbol: bfin
   Definitions
      At line 227 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 227 in file ..\Prac5_10\prac5_10.s
Comment: bfin used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

borra 00000258

Symbol: borra
   Definitions
      At line 253 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 255 in file ..\Prac5_10\prac5_10.s
Comment: borra used once
borra_pant 00000240

Symbol: borra_pant
   Definitions
      At line 245 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 79 in file ..\Prac5_10\prac5_10.s
      At line 184 in file ..\Prac5_10\prac5_10.s

bucle 000000F8

Symbol: bucle
   Definitions
      At line 129 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 135 in file ..\Prac5_10\prac5_10.s
      At line 182 in file ..\Prac5_10\prac5_10.s

codigo 00000000

Symbol: codigo
   Definitions
      At line 42 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: codigo unused
col_ab 000003DC

Symbol: col_ab
   Definitions
      At line 392 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 367 in file ..\Prac5_10\prac5_10.s
Comment: col_ab used once
col_ar 000003C8

Symbol: col_ar
   Definitions
      At line 385 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 358 in file ..\Prac5_10\prac5_10.s
Comment: col_ar used once
col_dch 00000404

Symbol: col_dch
   Definitions
      At line 406 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 348 in file ..\Prac5_10\prac5_10.s
Comment: col_dch used once
col_izq 000003F0



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: col_izq
   Definitions
      At line 399 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 339 in file ..\Prac5_10\prac5_10.s
Comment: col_izq used once
colision 000003A8

Symbol: colision
   Definitions
      At line 372 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 340 in file ..\Prac5_10\prac5_10.s
      At line 349 in file ..\Prac5_10\prac5_10.s
      At line 359 in file ..\Prac5_10\prac5_10.s

dch 0000034C

Symbol: dch
   Definitions
      At line 342 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 321 in file ..\Prac5_10\prac5_10.s
      At line 405 in file ..\Prac5_10\prac5_10.s

desactivar 000001E0

Symbol: desactivar
   Definitions
      At line 212 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 89 in file ..\Prac5_10\prac5_10.s
      At line 195 in file ..\Prac5_10\prac5_10.s

epilogo 000005F8

Symbol: epilogo
   Definitions
      At line 579 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 530 in file ..\Prac5_10\prac5_10.s
Comment: epilogo used once
escribir 0000022C

Symbol: escribir
   Definitions
      At line 238 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 241 in file ..\Prac5_10\prac5_10.s
Comment: escribir used once
fin_mov 00000478

Symbol: fin_mov
   Definitions
      At line 442 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 330 in file ..\Prac5_10\prac5_10.s
      At line 376 in file ..\Prac5_10\prac5_10.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 416 in file ..\Prac5_10\prac5_10.s

fin_reloj 000004E4

Symbol: fin_reloj
   Definitions
      At line 482 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 470 in file ..\Prac5_10\prac5_10.s
Comment: fin_reloj used once
gameover 00000194

Symbol: gameover
   Definitions
      At line 183 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 131 in file ..\Prac5_10\prac5_10.s
      At line 153 in file ..\Prac5_10\prac5_10.s
      At line 170 in file ..\Prac5_10\prac5_10.s

gandor 000001C0

Symbol: gandor
   Definitions
      At line 197 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: gandor unused
imp_mensaje 00000214

Symbol: imp_mensaje
   Definitions
      At line 229 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 87 in file ..\Prac5_10\prac5_10.s
      At line 192 in file ..\Prac5_10\prac5_10.s
      At line 207 in file ..\Prac5_10\prac5_10.s

inicio 00000000

Symbol: inicio
   Definitions
      At line 47 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 43 in file ..\Prac5_10\prac5_10.s
Comment: inicio used once
izq 0000032C

Symbol: izq
   Definitions
      At line 332 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 320 in file ..\Prac5_10\prac5_10.s
      At line 398 in file ..\Prac5_10\prac5_10.s

jugador1 00000110

Symbol: jugador1
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 140 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: jugador1 unused
jugador2 00000150

Symbol: jugador2
   Definitions
      At line 159 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: jugador2 unused
max_vel 00000544

Symbol: max_vel
   Definitions
      At line 516 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 511 in file ..\Prac5_10\prac5_10.s
Comment: max_vel used once
mov_ini 000002C0

Symbol: mov_ini
   Definitions
      At line 290 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 272 in file ..\Prac5_10\prac5_10.s
      At line 277 in file ..\Prac5_10\prac5_10.s
      At line 284 in file ..\Prac5_10\prac5_10.s

movimiento 000002DC

Symbol: movimiento
   Definitions
      At line 303 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 148 in file ..\Prac5_10\prac5_10.s
      At line 165 in file ..\Prac5_10\prac5_10.s

p1x 000005B4

Symbol: p1x
   Definitions
      At line 557 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 536 in file ..\Prac5_10\prac5_10.s
Comment: p1x used once
p1y 000005D4

Symbol: p1y
   Definitions
      At line 567 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 538 in file ..\Prac5_10\prac5_10.s
Comment: p1y used once
rerun 0000004C

Symbol: rerun
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 73 in file ..\Prac5_10\prac5_10.s
   Uses
      None
Comment: rerun unused
sigue 0000056C

Symbol: sigue
   Definitions
      At line 533 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 525 in file ..\Prac5_10\prac5_10.s
Comment: sigue used once
tab_inicial 00000268

Symbol: tab_inicial
   Definitions
      At line 260 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 104 in file ..\Prac5_10\prac5_10.s
      At line 121 in file ..\Prac5_10\prac5_10.s

unico 0000043C

Symbol: unico
   Definitions
      At line 423 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 413 in file ..\Prac5_10\prac5_10.s
Comment: unico used once
38 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABAJO 40007FFF

Symbol: ABAJO
   Definitions
      At line 18 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 362 in file ..\Prac5_10\prac5_10.s
Comment: ABAJO used once
ARRIBA 40007E00

Symbol: ARRIBA
   Definitions
      At line 17 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 80 in file ..\Prac5_10\prac5_10.s
      At line 185 in file ..\Prac5_10\prac5_10.s
      At line 249 in file ..\Prac5_10\prac5_10.s
      At line 292 in file ..\Prac5_10\prac5_10.s
      At line 353 in file ..\Prac5_10\prac5_10.s

R_DAT E0010000

Symbol: R_DAT
   Definitions
      At line 15 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 505 in file ..\Prac5_10\prac5_10.s
Comment: R_DAT used once
T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 16 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 460 in file ..\Prac5_10\prac5_10.s
Comment: T0_IR used once
VACIO 20202020

Symbol: VACIO
   Definitions
      At line 23 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 250 in file ..\Prac5_10\prac5_10.s
Comment: VACIO used once
VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 20 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 212 in file ..\Prac5_10\prac5_10.s
Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 19 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 69 in file ..\Prac5_10\prac5_10.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: VICIntEnable used once
VICVectAddr FFFFF030

Symbol: VICVectAddr
   Definitions
      At line 22 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 489 in file ..\Prac5_10\prac5_10.s
      At line 584 in file ..\Prac5_10\prac5_10.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 21 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 49 in file ..\Prac5_10\prac5_10.s
      At line 55 in file ..\Prac5_10\prac5_10.s
      At line 216 in file ..\Prac5_10\prac5_10.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rand 00000000

Symbol: rand
   Definitions
      At line 45 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 92 in file ..\Prac5_10\prac5_10.s
      At line 109 in file ..\Prac5_10\prac5_10.s
      At line 419 in file ..\Prac5_10\prac5_10.s

srand 00000000

Symbol: srand
   Definitions
      At line 44 in file ..\Prac5_10\prac5_10.s
   Uses
      At line 76 in file ..\Prac5_10\prac5_10.s
Comment: srand used once
2 symbols
407 symbols in table
