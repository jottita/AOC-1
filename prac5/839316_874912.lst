


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             datos,DATA
    2 00000000         ;TODO EL MOVIEMIENTO(dirx y diry) SE PODRIA HACER CON UN
                       A UNICA VARIABLE PARA CADA JUGADOR CON UN NUMERO DEL 0-3
                        
    3 00000000         ;REPRESENTADO CADA UNO UNA DIRECCIÓN{0 =IZQ,1=DER,2=ARRI
                       BA,3=ABAJO POR EJEMPLO}
    4 00000000         ;NO LO HE HECHO DE ESTA FORMA PORQUE SEGUI EL ESQUEMA QU
                       E SE NOS FACILITA Y
    5 00000000         ;SE ME OCURRIO CUANDO YA TENÍA GRAN PARTE DEL PROYECYO H
                       ECHO PERO CREO QUE SERIA MÁS SENCILLO DE ESA FORMA
    6 00000000 00000000 
                       reloj   DCD              0           ;contador de centes
                                                            imas de segundo
    7 00000004 00000020 
                       max     DCD              32          ;velocidad de movim
                                                            iento (en centesima
                                                            s s.)
    8 00000008 00000020 
                       velocidad
                               DCD              32          ; auxilar que cambi
                                                            a la vel
    9 0000000C 00000000 
                       mover   DCD              0           ;indica si hay que 
                                                            moverse
   10 00000010 00000000 
                       dir1x   DCD              0           ;mov. horizontal ju
                                                            gador1 (-1 izq,0 co
                                                            l fija,1 der) 
   11 00000014 00000000 
                       dir1y   DCD              0           ;mov. vertical juga
                                                            dor1 (-1 arriba,0 f
                                                            ila fija,1 abajo)
   12 00000018 00000000 
                       dir2x   DCD              0           ;mov. horizontal ju
                                                            gador2 (-1 izq.,0 c
                                                            ol fija,1 der)
   13 0000001C 00000000 
                       dir2y   DCD              0           ;mov. vertical juga
                                                            dor2 (-1 arriba,0 f
                                                            ila fija,1 abajo)
   14 00000020 00      fin     DCB              0           ;indicador fin de p
                                                            rograma (si vale 1)
                                                            
   15 00000021 E0010000 
                       R_DAT   EQU              0xE0010000  ;Registro de datos 
                                                            donde se guarda el 
                                                            ascii de la tecla p
                                                            ulsada
   16 00000021 E0004000 
                       T0_IR   EQU              0xE0004000  ;EOI del timer
   17 00000021 40007E00 
                       ARRIBA  EQU              0x40007E00  ;Limite por arriba 
                                                            
   18 00000021 40007FFF 
                       ABAJO   EQU              0x40007FFF  ;Limite por abajo
   19 00000021 FFFFF010 
                       VICIntEnable
                               EQU              0xFFFFF010  ;act. Irqs (solo 1’
                                                            s)



ARM Macro Assembler    Page 2 


   20 00000021 FFFFF014 
                       VICIntEnClr
                               EQU              0xFFFFF014  ;desact. IRQs (solo
                                                             1’s)
   21 00000021 FFFFF100 
                       VICVectAddr0
                               EQU              0xFFFFF100  ;vector interr. (VI
                                                            )
   22 00000021 FFFFF030 
                       VICVectAddr
                               EQU              0xFFFFF030  ;reg. para EOI
   23 00000021 20202020 
                       VACIO   EQU              0x20202020
   24 00000021 00 00 00 
              00000000 reloj_so
                               DCD              0           ;var. para @RSI_tim
                                                            er_SO 
   25 00000028 00000000 
                       teclado_so
                               DCD              0           ;var. para @RSI_tec
                                                            lado_SO 
   26 0000002C 00000016 
                       semilla DCD              0x000000016 ;semilla incializad
                                                            a
   27 00000030 00000000 
                       posicion1
                               DCD              0           ;posicion del perso
                                                            naje 1
   28 00000034 00000000 
                       posicion2
                               DCD              0           ;posicion del perso
                                                            naje 2
   29 00000038 00000000 
              00000000 
              00000000 pos_pos DCD              0,0,0       ; vector de posible
                                                            s posciones cuando 
                                                            el jugador se encue
                                                            ntra con una colisi
                                                            on 
   30 00000044 00000000 
                       colis   DCD              0           ; define si hay una
                                                             colision ;borrar, 
                                                            ya no uso
   31 00000048 30 30   marcador
                               DCB              '0','0'     ; marcadores de los
                                                             dos pj 
   32 0000004A         ; MENSAJES PARA IMPRIMIR POR PANTALLA
   33 0000004A 7C 4A 55 
              47 41 44 
              4F 52 7C 
              20 7C 20 cabecera
                               DCB              124,74,85,71,65,68,79,82,124,32
,124,32 
                                                            ; jugador
   34 00000056 09      tam_cab DCB              9           ; tamaño del mensaj
                                                            e de cabecera
   35 00000057 47 41 4E 
              41 44 4F 
              52 20 4A 



ARM Macro Assembler    Page 3 


              55 47 41 
              44 4F 52 
              20 20    pantalla_fin
                               DCB              71,65,78,65,68,79,82,32,74,85,7
1,65,68,79,82,32,32 
                                                            ; Ganador jugador
   36 00000068 10      tam_pf  DCB              16
   37 00000069 47 41 4D 
              45 20 4F 
              56 45 52 
              2E       game_over
                               DCB              71,65,77,69,32,79,86,69,82,46 
                                                            ; Game over
   38 00000073 0A      tam_go  DCB              10
   39 00000074 4E 20 2D 
              2D 20 3E 
              20 56 4F 
              4C 56 45 
              52 20 41 
              20 4A 55 
              47 41 52 
              20       volver_jugar
                               DCB              78,32,45,45,32,62,32,86,79,76,8
6,69,82,32,65,32,74,85,71,65,82,32
   40 0000008A 16      tam_vj  DCB              22
   41 0000008B 46 20 2D 
              2D 20 3E 
              20 41 43 
              41 42 41 
              52 20    acabar  DCB              70,32,45,45,32,62,32,65,67,65,6
6,65,82,32
   42 00000099 0E      tam_a   DCB              14
   43 0000009A 46 49 4E 
              20       mensaje_final
                               DCB              70,73,78,32 ; FIN 
   44 0000009E 04      tam_mf  DCB              4
   45 0000009F         
   46 0000009F 00 FFFFFFFF 
                       newgame DCD              -1          ;variable para sabe
                                                            r si se quiere volv
                                                            er a jugar
   47 000000A4         ;posibles modificaciones para el 10 -> quitar cola,poner
                        pantalla de volver a jugar + poner marcador
   48 000000A4         
   49 000000A4         
   50 000000A4                 AREA             codigo,CODE
   51 00000000                 EXPORT           inicio      ; forma de enlazar 
                                                            con el startup.s
   52 00000000                 IMPORT           srand       ; para poder invoca
                                                            r SBR srand
   53 00000000                 IMPORT           rand        ; para poder invoca
                                                            r SBR rand
   54 00000000         
   55 00000000         inicio
   56 00000000 E59F0874        LDR              r0,=VICVectAddr0 ;salva guarda 
                                                            de la timer del sis
                                                            tema operativo
   57 00000004 E59F1874        LDR              r1,=reloj_so
   58 00000008 E3A02004        mov              r2,#4



ARM Macro Assembler    Page 4 


   59 0000000C E7903102        ldr              r3,[r0,r2,LSL #2]
   60 00000010 E5813000        str              r3,[r1]
   61 00000014         
   62 00000014 E59F0860        LDR              r0,=VICVectAddr0 ;salva guarda 
                                                            de la teclado del s
                                                            istema operativo
   63 00000018 E59F1864        LDR              r1,=teclado_so
   64 0000001C E3A02007        mov              r2,#7
   65 00000020 E7903102        ldr              r3,[r0,r2,LSL #2]
   66 00000024 E5813000        str              r3,[r1]
   67 00000028         
   68 00000028         
   69 00000028 E59F1858        LDR              r1,=RSI_reloj ; programar @IRQ4
                                                             -> RSI_reloj
   70 0000002C E3A02004        mov              r2,#4
   71 00000030 E7801102        str              r1,[r0,r2,LSL #2] ; Guardamos R
                                                            SI_reloj en la posi
                                                            ción 4 de vector Ad
                                                            dr
   72 00000034 E59F1850        LDR              r1,=RSI_teclado ; programar @IR
                                                            Q7 -> RSI_teclado
   73 00000038 E3A02007        mov              r2,#7
   74 0000003C E7801102        str              r1,[r0,r2,LSL #2] ; Guardamos R
                                                            SI_reloj en la posi
                                                            ción 7 de vector Ad
                                                            dr
   75 00000040         
   76 00000040 E59F0848        LDR              r0,=VICIntEnable 
                                                            ; activar IRQ4,IRQ7
                                                            
   77 00000044 E3A01090        mov              r1,#2_10010000
   78 00000048 E5801000        str              r1,[r0]
   79 0000004C         
   80 0000004C E59F0840        LDR              r0,=semilla ;  llamanda a srand
                                                            
   81 00000050 E5900000        ldr              r0,[r0]
   82 00000054 E52D0004        PUSH{r0}
   83 00000058 EBFFFFFE        bl               srand
   84 0000005C E28DD004        add              sp,sp,#4    ; inicializamos la 
                                                            semilla antes de la
                                                             etiqueta de newrun
                                                             para que siempre h
                                                            aya numeros distint
                                                            os y no se reinicie
                                                             la semilla
   85 00000060         
   86 00000060 E3E00000 
                       newrun  mov              r0,#-1
   87 00000064 E59F182C        ldr              r1,=newgame ; reiniciamos las v
                                                            ariables para volve
                                                            r a emepzar a jugar
                                                            
   88 00000068 E5C10000        strb             r0,[r1]
   89 0000006C E3A00000        mov              r0,#0
   90 00000070 E59F1824        ldr              r1,=fin
   91 00000074 E5C10000        strb             r0,[r1]
   92 00000078 E59F1820        ldr              r1, = marcador ; ponemos los ma
                                                            rcadores a 0 0
   93 0000007C E3A00030        mov              r0,#'0'



ARM Macro Assembler    Page 5 


   94 00000080 E5C10000        strb             r0,[r1]     ; marcador 1 = 0
   95 00000084 E5C10001        strb             r0,[r1,#1]  ; marcador 2 = 0
   96 00000088         
   97 00000088         
   98 00000088         
   99 00000088         
  100 00000088         
  101 00000088 EB0000B6 
                       rerun   bl               borra_pant  ; subrutina para po
                                                            ner la pantalla en 
                                                            blanco
  102 0000008C E59F0810        LDR              r0,=ARRIBA
  103 00000090 E2800004        add              r0,r0,#4
  104 00000094         
  105 00000094 E59F180C        ldr              r1,=cabecera
  106 00000098 E59F280C        ldr              r2,=tam_cab
  107 0000009C E5D24000        ldrb             r4,[r2]
  108 000000A0 E3A03058        mov              r3,#'X'
  109 000000A4 E7C13004        strb             r3,[r1,r4]
  110 000000A8 E2844002        add              r4,r4,#2
  111 000000AC E59F37EC        ldr              r3,=marcador
  112 000000B0 E5D33000        ldrb             r3,[r3]
  113 000000B4 E7C13004        strb             r3,[r1,r4]
  114 000000B8 E2844001        add              r4,r4,#1
  115 000000BC E92D0013        push{r0,r1,r4}
  116 000000C0 EB00009D        bl               imp_mensaje
  117 000000C4 E28DD00C        add              sp,sp,#12
  118 000000C8         
  119 000000C8 E0800004        add              r0,r0,r4
  120 000000CC E59F17D4        ldr              r1,=cabecera
  121 000000D0 E59F27D4        ldr              r2,=tam_cab
  122 000000D4 E5D22000        ldrb             r2,[r2]
  123 000000D8 E3A0304F        mov              r3,#'O'
  124 000000DC E7C13002        strb             r3,[r1,r2]
  125 000000E0 E2822002        add              r2,r2,#2
  126 000000E4 E59F37B4        ldr              r3,=marcador
  127 000000E8 E5D33001        ldrb             r3,[r3,#1]
  128 000000EC E7C13002        strb             r3,[r1,r2]
  129 000000F0 E2822001        add              r2,r2,#1
  130 000000F4 E92D0007        push{r0,r1,r2}
  131 000000F8 EB00008F        bl               imp_mensaje
  132 000000FC E28DD00C        add              sp,sp,#12
  133 00000100         
  134 00000100         
  135 00000100         ; POSICION Y MOVIMIENTO PJ1
  136 00000100 E24DD004        sub              sp,sp,#4    ; añadimos un hueco
                                                             para el resultado
  137 00000104 EBFFFFFE        bl               rand
  138 00000108 E49D0004        pop{r0}                      ; r0= numero aleato
                                                            rio sin limitar
  139 0000010C         
  140 0000010C E3A01C02        mov              r1,#512
  141 00000110 E2411001        sub              r1,r1,#1    ; r1 = 511 
  142 00000114 E0000001        and              r0,r0,r1    ; r0 = primero 9 bi
                                                            ts del numero aleat
                                                            orio
  143 00000118 E59F1790        ldr              r1,=dir1x   ; r1 =@dirx
  144 0000011C E59F2790        ldr              r2,=dir1y   ; r2 =@diry
  145 00000120 E59F3790        ldr              r3,=posicion1 ; r3 =@posicion



ARM Macro Assembler    Page 6 


  146 00000124 E3A04058        mov              r4,#'X'     ; r4 = X
  147 00000128         
  148 00000128 E92D001F        push{r0,r1,r2,r3,r4}         ; pasamos {9 bits,@
                                                            dirx,@diry,@posicio
                                                            n}
  149 0000012C EB000097        bl               tab_inicial ; subrutina que nos
                                                             configur la primer
                                                            a posicion y moviem
                                                            into aleatorio del 
                                                            personaje
  150 00000130 E28DD010        add              sp,sp,#16
  151 00000134         
  152 00000134         
  153 00000134 E24DD004        sub              sp,sp,#4    ; POSICION Y MOVIMI
                                                            ENTO PJ2
  154 00000138 EBFFFFFE        bl               rand
  155 0000013C E49D0004        pop{r0}                      ; r0= numero aleato
                                                            rio nuevo sin limit
                                                            ar
  156 00000140         
  157 00000140 E3A01C02        mov              r1,#512
  158 00000144 E2411001        sub              r1,r1,#1    ; r1= 511
  159 00000148 E0000001        and              r0,r0,r1    ; r0 = primero 9 bi
                                                            ts del numero aleat
                                                            orio
  160 0000014C E59F1768        ldr              r1,=dir2x   ; r1 =@dirx
  161 00000150 E59F2768        ldr              r2,=dir2y   ; r2 =@diry
  162 00000154 E59F3768        ldr              r3,=posicion2 ; r3 =@posicion 
  163 00000158 E3A0404F        mov              r4,#'O'     ; r4 = O   
  164 0000015C         
  165 0000015C E92D001F        push{r0,r1,r2,r3,r4}         ; pasamos {9 bits,@
                                                            dirx,@diry,@posicio
                                                            n,letra,caracter}
  166 00000160 EB00008A        bl               tab_inicial ; subrutina que nos
                                                             configur la primer
                                                            a posicion y moviem
                                                            into aleatorio del 
                                                            personaje
  167 00000164 E28DD010        add              sp,sp,#16
  168 00000168         
  169 00000168         
  170 00000168         
  171 00000168 E59F072C        LDR              r0, =fin    ; r0 = @fin
  172 0000016C E59F1754        LDR              r1, =mover  ; r1 = @mover
  173 00000170         
  174 00000170 E5902000 
                       bucle   ldr              r2,[r0]     ;r2 = fin
  175 00000174 E3520001        cmp              r2,#1       ; si fin == 1
  176 00000178 0B00007A        bleq             borra_pant
  177 0000017C 0A000043        beq              acabo       ;  salto a desactiv
                                                            ar
  178 00000180         ; sino
  179 00000180 E5912000        ldr              r2,[r1]     ;   r2 = mover
  180 00000184 E3520001        cmp              r2,#1       ;  si mover != 1
  181 00000188 1AFFFFF8        bne              bucle       ;   salta a bucle
  182 0000018C         ; si no:
  183 0000018C         
  184 0000018C         ;MOVIMIENTO DE PERSONAJE 1
  185 0000018C         



ARM Macro Assembler    Page 7 


  186 0000018C E59F2724 
                       jugador1
                               ldr              r2, =posicion1 
                                                            ; r2 = @posicion1
  187 00000190 E59F3718        ldr              r3, =dir1x  ; r3 = @dir1x
  188 00000194 E59F4718        ldr              r4, =dir1y  ; r4 = @dir1y
  189 00000198 E59F572C        ldr              r5, =colis  ; r5 = @colis
  190 0000019C E59F672C        ldr              r6, =pos_pos ; r6 = @pos_pos
  191 000001A0         
  192 000001A0 E24DD004        sub              sp,sp,#4    ; dejamos espacio p
                                                            ara el resultado de
                                                             las subrutina
  193 000001A4 E92D007C        push{r2-r6}                  ; pasamos los param
                                                            etros//posicion,dir
                                                            x,diry,colis,pos_po
                                                            s
  194 000001A8 EB0000C1        bl               movimiento  ;
  195 000001AC E28DD014        add              sp,sp,#20   ; desapilamos los p
                                                            arametro que no nos
                                                             interesa recuperar
                                                            
  196 000001B0 E49D7004        pop{r7}                      ; cargamos el resul
                                                            tado en r2
  197 000001B4 E3570001        cmp              r7,#1       ; si el resultado =
                                                             1
  198 000001B8 03A07032        moveq            r7,#50      ;  r7 = 2 porque si
                                                             no encuentra movim
                                                            iento gana el jugad
                                                            or 2
  199 000001BC 0A000013        beq              gameover    ; fin del prgrama(n
                                                            o hya movimientos p
                                                            osibles)
  200 000001C0         
  201 000001C0 E5927000        ldr              r7,[r2]
  202 000001C4 E3A08058        mov              r8,#'X'     ; pintarlo
  203 000001C8 E5C78000        strb             r8,[r7]     ;   
  204 000001CC         
  205 000001CC E59F26F0 
                       jugador2
                               ldr              r2, =posicion2 
                                                            ; r2 = @posicion1
  206 000001D0 E59F36E4        ldr              r3, =dir2x  ; r3 = @dir1x
  207 000001D4 E59F46E4        ldr              r4, =dir2y  ; r4 = @dir1y
  208 000001D8         
  209 000001D8 E24DD004        sub              sp,sp,#4    ; dejamos espacio p
                                                            ara el resultado de
                                                             las subrutina
  210 000001DC E92D007C        push{r2-r6}                  ; pasamos los param
                                                            etros
  211 000001E0 EB0000B3        bl               movimiento  ;
  212 000001E4 E28DD014        add              sp,sp,# 20  ; desapilamos los p
                                                            arametro que no nos
                                                             interesa recuperar
                                                            
  213 000001E8 E49D7004        pop{r7}                      ; cargamos el resul
                                                            tado en r2
  214 000001EC E3570001        cmp              r7,#1       ; si el resultado =
                                                             1
  215 000001F0 03A07031        moveq            r7,#49      ; r7 = 1 porque pie



ARM Macro Assembler    Page 8 


                                                            rde el dos
  216 000001F4 0A000005        beq              gameover    ; fin del prgrama(n
                                                            o hya movimientos p
                                                            osibles)
  217 000001F8         ;  r7 = 1 porque si no encuentra movimiento gana el juga
                       dor 1
  218 000001F8         
  219 000001F8 E5927000        ldr              r7,[r2]
  220 000001FC E3A0804F        mov              r8,#'O'     ; pintarlo
  221 00000200 E5C78000        strb             r8,[r7]     ;    
  222 00000204         
  223 00000204         
  224 00000204 E0277007        eor              r7,r7,r7    ;  r7 = 0
  225 00000208 E5817000        str              r7,[r1]     ;  mover = 0
  226 0000020C         
  227 0000020C         
  228 0000020C EAFFFFD7        b                bucle
  229 00000210         gameover
  230 00000210 EB000054        bl               borra_pant  ; subrutina para po
                                                            ner la pantalla en 
                                                            blanco
  231 00000214 E59F0684        ldr              r0,=marcador ; r0 = @marcadores
                                                              
  232 00000218         ; usaremos r2 como indice para ubicar el marcador del ga
                       nador
  233 00000218 E3570031        cmp              r7,#49      ; si r7 == 49(1)
  234 0000021C 03A01000        moveq            r1,#0
  235 00000220 C3A01001        movgt            r1,#1
  236 00000224 E7D02001        ldrb             r2,[r0,r1]  ; r2 = marcadores[r
                                                            1]
  237 00000228 E2822001        add              r2,r2,#1    ; r++
  238 0000022C E3520035        cmp              r2,#'5'     ; si r2 < que 5 vol
                                                            vemos a empezar la 
                                                            partida
  239 00000230 E7C02001        strb             r2,[r0,r1]
  240 00000234 B59F2690        ldrlt            r2,=colis
  241 00000238 B3A01000        movlt            r1,#0
  242 0000023C B5821000        strlt            r1,[r2]
  243 00000240 BAFFFF90        blt              rerun       ;
  244 00000244         ; si r2 == 5 fin del partido
  245 00000244 E59F0658        LDR              r0,=ARRIBA
  246 00000248 E28000A2        add              r0,r0,#162
  247 0000024C E59F1680        ldr              r1,=game_over
  248 00000250 E59F2680        ldr              r2,=tam_go
  249 00000254 E5D22000        ldrb             r2,[r2]
  250 00000258         
  251 00000258 E92D0007        push{r0,r1,r2}
  252 0000025C EB000036        bl               imp_mensaje
  253 00000260 E28DD00C        add              sp,sp,#12
  254 00000264 E3570000        cmp              r7,#0
  255 00000268 0A000026        beq              desactivar
  256 0000026C         
  257 0000026C         gandor
  258 0000026C E0800002        add              r0,r0,r2
  259 00000270 E59F1664        ldr              r1,=pantalla_fin 
                                                            ; mensaje ganador
  260 00000274 E59F2664        ldr              r2,=tam_pf
  261 00000278 E5D22000        ldrb             r2,[r2]
  262 0000027C E7C17002        strb             r7,[r1,r2]  ; añades el 1 o el 



ARM Macro Assembler    Page 9 


                                                            2
  263 00000280 E2822001        add              r2,r2,#1
  264 00000284         
  265 00000284         
  266 00000284 E92D0007        push{r0,r1,r2}
  267 00000288 EB00002B        bl               imp_mensaje
  268 0000028C E28DD00C        add              sp,sp,#12
  269 00000290         
  270 00000290 E59F060C 
                       acabo   ldr              r0,=ARRIBA  ; 
  271 00000294 E28000C2        add              r0,r0,#194  ; mensaje nueva par
                                                            tida o fin
  272 00000298 E59F1644        ldr              r1,=volver_jugar
  273 0000029C E59F2644        ldr              r2,=tam_vj
  274 000002A0 E5D22000        ldrb             r2,[r2]
  275 000002A4 E92D0007        push{r0,r1,r2}
  276 000002A8 EB000023        bl               imp_mensaje
  277 000002AC E28DD00C        add              sp,sp,#12
  278 000002B0         
  279 000002B0 E2800020        add              r0,r0,#32   ; mensaje nueva par
                                                            tida o fin
  280 000002B4 E59F1630        ldr              r1,=acabar
  281 000002B8 E59F2630        ldr              r2,=tam_a
  282 000002BC E5D22000        ldrb             r2,[r2]
  283 000002C0 E92D0007        push{r0,r1,r2}
  284 000002C4 EB00001C        bl               imp_mensaje
  285 000002C8 E28DD00C        add              sp,sp,#12
  286 000002CC         
  287 000002CC E59F15C4        ldr              r1,=newgame ;ponemos newgame a 
                                                            0
  288 000002D0 E3A02000        mov              r2,#0
  289 000002D4 E5812000        str              r2,[r1]
  290 000002D8         
  291 000002D8 E59F15B8 
                       infinito
                               ldr              r1,=newgame ; r0 = @newgame
  292 000002DC E5911000        ldr              r1,[r1]     ; r0 = newgame
  293 000002E0 E3510001        cmp              r1,#1       ; si r0 == 1
  294 000002E4 0AFFFF5D        beq              newrun      ; salata a newrun
  295 000002E8 BAFFFFFA        blt              infinito    ; se queda esperand
                                                            o a que se pulse la
                                                             tecla r0 < 1
  296 000002EC         ; si r0 > 1 fin del programa
  297 000002EC         
  298 000002EC EB00001D        bl               borra_pant  ; mensaje final
  299 000002F0 E59F15FC        ldr              r1,=mensaje_final
  300 000002F4         
  301 000002F4 E59F25FC        ldr              r2,=tam_mf
  302 000002F8 E5D22000        ldrb             r2,[r2]
  303 000002FC         
  304 000002FC E92D0007        push{r0,r1,r2}
  305 00000300 EB00000D        bl               imp_mensaje
  306 00000304 E28DD00C        add              sp,sp,#12
  307 00000308         
  308 00000308 E59F05EC 
                       desactivar
                               LDR              r0,=VICIntEnClr ;desactivar IRQ
                                                            4,IRQ7
  309 0000030C E3A01090        mov              r1,#2_10010000



ARM Macro Assembler    Page 10 


  310 00000310 E5801000        str              r1,[r0]
  311 00000314         
  312 00000314 E59F0560        ldr              r0,=VICVectAddr0 ; r0 = @VICVec
                                                            tAddr0
  313 00000318 E59F1560        LDR              r1,=reloj_so ; recuperacion rel
                                                            oj_so; r1 = @reloj_
                                                            so
  314 0000031C E5911000        ldr              r1,[r1]     ; r1 = reloj_so
  315 00000320 E3A02004        mov              r2,#4       ; 
  316 00000324 E7801202        str              r1,[r0,r2,LSL#4] ; VI[4]=@RSI_r
                                                            eloj_SO
  317 00000328         
  318 00000328 E59F1554        LDR              r1,=teclado_so ; recuperacion r
                                                            eloj_so; r0 = @tecl
                                                            ado_so
  319 0000032C E5911000        ldr              r1,[r1]     ; r1 = teclado_so
  320 00000330 E3A02007        mov              r2,#7
  321 00000334 E7801202        str              r1,[r0,r2,LSL#4] ; VI[7]=@RSI_t
                                                            eclado_SO
  322 00000338         
  323 00000338 EAFFFFFE 
                       bfin    b                bfin
  324 0000033C         
  325 0000033C         imp_mensaje
  326 0000033C E92D4800        push{lr,fp}
  327 00000340 E1A0B00D        mov              fp,sp
  328 00000344 E92D000F        push{r0-r3}
  329 00000348         
  330 00000348         
  331 00000348 E59B0008        ldr              r0,[fp,#8]  ; memoria donde emp
                                                            ezar mensaje
  332 0000034C E59B100C        ldr              r1,[fp,#12] ; primer @ del vect
                                                            ore del mensaje
  333 00000350 E59B2010        ldr              r2,[fp,#16] ; tamaño del mensaj
                                                            e
  334 00000354         
  335 00000354 E4D13001 
                       escribir
                               ldrb             r3,[r1],#1  ; escribimos bit a 
                                                            bit el mensaje
  336 00000358 E4C03001        strb             r3,[r0],#1
  337 0000035C E2522001        subs             r2,r2,#1
  338 00000360 1AFFFFFB        bne              escribir
  339 00000364         
  340 00000364 E8BD880F        pop{r0-r3,fp,pc}
  341 00000368         
  342 00000368         borra_pant                           ;PONE LA PANTLLA EN
                                                             BLANCO
  343 00000368 E92D4800        push{lr,fp}
  344 0000036C E1A0B00D        mov              fp,sp
  345 00000370 E92D0007        push{r0-r2}
  346 00000374 E59F0528        LDR              r0,=ARRIBA
  347 00000378 E59F1580        LDR              r1,=VACIO
  348 0000037C E3A02080        mov              r2,#128
  349 00000380         
  350 00000380 E4801004 
                       borra   str              r1,[r0],#4
  351 00000384 E2522001        subs             r2,r2,#1
  352 00000388 1AFFFFFC        bne              borra



ARM Macro Assembler    Page 11 


  353 0000038C         
  354 0000038C E8BD8807        pop{r0-r2,fp,pc}
  355 00000390         
  356 00000390         
  357 00000390         tab_inicial
  358 00000390 E92D4800        push{lr,fp}
  359 00000394 E1A0B00D        mov              fp,sp
  360 00000398 E92D001F        push{r0-r4}
  361 0000039C         
  362 0000039C E59B0008        ldr              r0,[fp,#8]  ;r0 = 9 bits
  363 000003A0 E59B1014        ldr              r1,[fp,#20] ;r1 = posicion
  364 000003A4 E59B200C        ldr              r2,[fp,#12] ;r2 = dirx
  365 000003A8         
  366 000003A8 E3A0307F        mov              r3,#127
  367 000003AC E1500003        cmp              r0,r3       ; 0-127 = izq,128-2
                                                            55 = dch,255-383 = 
                                                            arriba,384-511 = ab
                                                            ajo
  368 000003B0 D3E04000        movle            r4,#-1      ; si r0 <= 127 --> 
                                                            4 = -1
  369 000003B4 DA00000B        ble              mov_ini
  370 000003B8         
  371 000003B8 E2833080        add              r3,#128
  372 000003BC E1500003        cmp              r0,r3
  373 000003C0 D3A04001        movle            r4,#1       ; si r10 <=255  -->
                                                             r4 =  1
  374 000003C4 DA000007        ble              mov_ini
  375 000003C8         
  376 000003C8 E59B2010        ldr              r2,[fp,#16] ;r2 = @diry
  377 000003CC         
  378 000003CC E2833080        add              r3,#128
  379 000003D0 E1500003        cmp              r0,r3
  380 000003D4 D3E0401F        movle            r4,#-32     ; si r0 <= 383 --> 
                                                            r4 = -32
  381 000003D8 DA000002        ble              mov_ini
  382 000003DC         
  383 000003DC E2833080        add              r3,#128
  384 000003E0 E1500003        cmp              r0,r3       ;      
  385 000003E4 D3A04020        movle            r4,#32      ; si r0 <= 511 --> 
                                                            r4 =  31 
  386 000003E8         
  387 000003E8 E5824000 
                       mov_ini str              r4,[r2]     ; dir en r2 = r4
  388 000003EC         
  389 000003EC E59F24B0        LDR              r2,=ARRIBA  ; r2 = @ARRIBA; al 
                                                            ser una constante "
                                                            global" no la paso 
                                                            por parametro 
  390 000003F0 E2822020        add              r2,r2,#32   ; le sumamos 32 a l
                                                            a posicion de arrib
                                                            a para que no apare
                                                            zcan numeros en la 
                                                            cabecera
  391 000003F4 E2400020        sub              r0,r0,#32   ; le restamos 32 a 
                                                            los 9 bits para que
                                                             no se salgan del t
                                                            ablero
  392 000003F8 E0820000        add              r0,r2,r0    ; r0 = limite de ar
                                                            riba del vector + r



ARM Macro Assembler    Page 12 


                                                            0(primeros 9 bit)= 
                                                            posicion elegida de
                                                            finitiva
  393 000003FC E5810000        str              r0,[r1]     ; posicion = r0(pos
                                                            icion elegida defin
                                                            itiva)
  394 00000400 E59B2018        ldr              r2,[fp,#24] ; r2 = 'X'|'O'
  395 00000404 E5C02000        strb             r2,[r0]     ; r2 se almacena/di
                                                            buja en r0
  396 00000408 E8BD881F        pop{r0-r4,fp,pc}
  397 0000040C         
  398 0000040C         
  399 0000040C         ; SE PODRIA HACER UNA ÚNICA SUBRUTINA QUE HICIESE LO QUE
                        HACEN LAS CUATRO SIGUIENTES, PERO ME HE DADO CUENTA CUA
                       NDO 
  400 0000040C         ; EL PROBLEMA ACABADO. ASI QUE LO HE DEJADO ASI POR TIEM
                       POA
  401 0000040C         posicion_izq                         ;SUBRUTINA QUE CALC
                                                            ULA LA POSICION DE 
                                                            MEMORIA DE LA IZQ
  402 0000040C E92D4800        push{lr,fp}
  403 00000410 E1A0B00D        mov              fp,sp
  404 00000414 E92D00C0        push{r6,r7}
  405 00000418         
  406 00000418 E59B5008        ldr              r5,[fp,#8]  ; r5 = posicion
  407 0000041C         
  408 0000041C E2456001        sub              r6,r5,#1    ; r6 = r5 - 1(dir1x
                                                            )
  409 00000420 E206701F        and              r7, r6, #31 ; r7 = r6(posible p
                                                            osicion final) and 
                                                            31(numero de column
                                                            as)
  410 00000424 E357001F        cmp              r7,#31      ; si r7 == 31
  411 00000428 0285601F        addeq            r6,r5,#31   ;  r6 = r5(pos inic
                                                            ial) - 31(una fila 
                                                            entera)
  412 0000042C         
  413 0000042C E58B600C        str              r6,[fp,#12] ;   resultado = r6
  414 00000430 E8BD88C0        pop{r6-r7,fp,pc}
  415 00000434         
  416 00000434         posicion_dch                         ;SUBRUTINA QUE CALC
                                                            ULA LA POSICION DE 
                                                            MEMORIA DE LA DCH
  417 00000434 E92D4800        push{lr,fp}
  418 00000438 E1A0B00D        mov              fp,sp
  419 0000043C E92D00C0        push{r6,r7}
  420 00000440         
  421 00000440 E59B5008        ldr              r5,[fp,#8]  ; r5 = posicion
  422 00000444         
  423 00000444 E2856001        add              r6,r5,#1    ; r6 = r5 + 1(dir1x
                                                            )
  424 00000448 E206701F        and              r7,r6,#31   ; r7 = r6(posible p
                                                            osicion final) and 
                                                            31(numero de column
                                                            as
  425 0000044C E3570000        cmp              r7,#0       ; si r7 == 0
  426 00000450 0245601F        subeq            r6,r5,#31   ;  r6 = r5(pos inic
                                                            ial) - 31(una fila 
                                                            entera) 



ARM Macro Assembler    Page 13 


  427 00000454         
  428 00000454 E58B600C        str              r6,[fp,#12] ;   resultado = r6
  429 00000458 E8BD88C0        pop{r6-r7,fp,pc}
  430 0000045C         
  431 0000045C         posicion_arrb                        ;SUBRUTINA QUE CALC
                                                            ULA LA POSICION DE 
                                                            MEMORIA DE ARRIBA
  432 0000045C E92D4800        push{lr,fp}
  433 00000460 E1A0B00D        mov              fp,sp
  434 00000464 E92D00C0        push{r6,r7}
  435 00000468         
  436 00000468 E59B5008        ldr              r5,[fp,#8]  ; r5 = posicion
  437 0000046C         
  438 0000046C E2456020        sub              r6,r5,#32   ; r6 = r5 - 32(dir1
                                                            y)
  439 00000470 E59F742C        ldr              r7,=ARRIBA  ; si no: r7 = @ARRI
                                                            BA
  440 00000474 E2877020        add              r7,#32      ; añadimos la fila 
                                                            del marcador
  441 00000478 E1570006        cmp              r7,r6       ; si r7 > r6
  442 0000047C 82866E1E        addhi            r6,r6,#480  ;  r8 = r8 + 512(un
                                                             tablero entero)
  443 00000480         
  444 00000480 E58B600C        str              r6,[fp,#12] ;   resultado = r6
  445 00000484 E8BD88C0        pop{r6-r7,fp,pc}
  446 00000488         
  447 00000488         posicion_abj                         ;SUBRUTINA QUE CALC
                                                            ULA LA POSICION DE 
                                                            MEMORIA DE ABAJO
  448 00000488 E92D4800        push{lr,fp}
  449 0000048C E1A0B00D        mov              fp,sp
  450 00000490 E92D00C0        push{r6,r7}
  451 00000494 E59B5008        ldr              r5,[fp,#8]  ; r5 = posicion
  452 00000498         
  453 00000498 E2856020        add              r6,r5,#32   ;r6 = r5 + 32(dir1y
                                                            )
  454 0000049C E59F7460        ldr              r7,=ABAJO   ; si no: r7 = @ABAJ
                                                            O
  455 000004A0 E1560007        cmp              r6,r7       ; si r6 > r7
  456 000004A4 82466E1E        subhi            r6,r6,#480  ;  r6 = r6 - 512(un
                                                             tablero entero)
  457 000004A8 E5937000        ldr              r7,[r3]     ; r7 = colis
  458 000004AC         
  459 000004AC E58B600C        str              r6,[fp,#12] ;   resultado = r6
  460 000004B0 E8BD88C0        pop{r6-r7,fp,pc}
  461 000004B4         
  462 000004B4         movimiento                           ;SUBRUTINA QUE CALC
                                                            ULA TOD EL MOVIMIEN
                                                            TO, INCLUIDO CHOQUE
                                                             CON BORDES Y COLIS
                                                            IONES
  463 000004B4 E92D4800        push{lr,fp}
  464 000004B8 E1A0B00D        mov              fp,sp
  465 000004BC E92D07FF        push{r0-r10}
  466 000004C0 E59B0008        ldr              r0,[fp,#8]  ; r0 = @posicion
  467 000004C4 E59B100C        ldr              r1,[fp,#12] ; r1 = @dirx
  468 000004C8 E59B2010        ldr              r2,[fp,#16] ; r2 = @diry
  469 000004CC E59B3014        ldr              r3,[fp,#20] ; r3 = @colis
  470 000004D0 E59B4018        ldr              r4,[fp,#24] ; r4 = @pos_pos



ARM Macro Assembler    Page 14 


  471 000004D4 E02AA00A        eor              r10,r10,r10 ; r10 = 0 [será don
                                                            de almacenamos si e
                                                            s game over para pa
                                                            sarlo al final como
                                                             resultado de la su
                                                            brutina]
  472 000004D8         
  473 000004D8         ; realmente podrias pasar como parametro @fin, con un st
                       ore modificarlo directamente y
  474 000004D8         ; hacer que la subrutina no tuviese resultado, pero al f
                       inal 
  475 000004D8         ; se usan los mismos registros asi que me queda con esta
                        porque era la que ya tenia implementada.
  476 000004D8         
  477 000004D8 E5905000        ldr              r5,[r0]     ; r5 = posicion1
  478 000004DC E5916000        ldr              r6,[r1]     ; r6 = dir1x
  479 000004E0 E3560000        cmp              r6,#0       ;
  480 000004E4 4A000006        bmi              izq         ; si r6 < 0 --> sal
                                                            to a izq
  481 000004E8 CA00000B        bgt              dch         ; si r6 > 0 -->  sa
                                                            lto a dch
  482 000004EC         
  483 000004EC E5926000        ldr              r6,[r2]     ; r6 = dir1y
  484 000004F0 E3560000        cmp              r6,#0       ; si r6 == 0
  485 000004F4 BA00000E        blt              arriba      ; si r6 < 0 --> sal
                                                            to a arriba
  486 000004F8 CA000013        bgt              abajo       ; si r6 > 0 -->  sa
                                                            lto a abajo
  487 000004FC         ; si ninguno de los dos salta significa que no se ha esc
                       ogido tecla
  488 000004FC E1A06005        mov              r6,r5
  489 00000500         
  490 00000500 EA000059        b                fin_mov     ;seguir direccion a
                                                            nterior
  491 00000504         ; r5 = posicion1
  492 00000504         
  493 00000504         
  494 00000504         izq
  495 00000504 E24DD004        sub              sp,sp,#4
  496 00000508 E52D5004        push{r5}
  497 0000050C EBFFFFBE        bl               posicion_izq
  498 00000510 E28DD004        add              sp,sp,#4
  499 00000514 E49D6004        pop{r6}
  500 00000518 EA000010        b                colision
  501 0000051C         
  502 0000051C E24DD004 
                       dch     sub              sp,sp,#4
  503 00000520 E52D5004        push{r5}
  504 00000524 EBFFFFC2        bl               posicion_dch
  505 00000528 E28DD004        add              sp,sp,#4
  506 0000052C E49D6004        pop{r6}
  507 00000530 EA00000A        b                colision
  508 00000534         
  509 00000534         arriba
  510 00000534 E24DD004        sub              sp,sp,#4
  511 00000538 E52D5004        push{r5}
  512 0000053C EBFFFFC6        bl               posicion_arrb
  513 00000540 E28DD004        add              sp,sp,#4
  514 00000544 E49D6004        pop{r6}



ARM Macro Assembler    Page 15 


  515 00000548 EA000004        b                colision
  516 0000054C         
  517 0000054C E24DD004 
                       abajo   sub              sp,sp,#4
  518 00000550 E52D5004        push{r5}
  519 00000554 EBFFFFCB        bl               posicion_abj
  520 00000558 E28DD004        add              sp,sp,#4
  521 0000055C E49D6004        pop{r6}
  522 00000560         
  523 00000560         
  524 00000560         
  525 00000560         
  526 00000560         
  527 00000560         colision
  528 00000560         
  529 00000560 E5D67000        ldrb             r7,[r6]     ; r7 = ascii que ha
                                                            y en r6(posible pos
                                                            icion final )
  530 00000564 E3570020        cmp              r7,#32      ; si r7 != 32(space
                                                             en ascii)
  531 00000568 0A00003F        beq              fin_mov     ; hay colision
  532 0000056C         
  533 0000056C E3A07001        mov              r7,#1       ;  
  534 00000570 E0288008        eor              r8,r8,r8    ; r8 = 0
  535 00000574 E1A09004        mov              r9,r4       ; r9 = @pos_pos; ha
                                                            cemos esto porque v
                                                            amos a modificar la
                                                             @ en r9 pero neces
                                                            itamos la principal
                                                             r4 intacta
  536 00000578         
  537 00000578         ;COLISION ARRIBA  
  538 00000578 E24DD004        sub              sp,sp,#4
  539 0000057C E52D5004        push{r5}
  540 00000580 EBFFFFB5        bl               posicion_arrb
  541 00000584 E28DD004        add              sp,sp,#4
  542 00000588 E49D6004        pop{r6}
  543 0000058C         
  544 0000058C E5D67000        ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  545 00000590 E3570020        cmp              r7,#32      ; si r7 == 32
  546 00000594 02888001        addeq            r8,r8,#1    ;  r8++
  547 00000598 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  548 0000059C         
  549 0000059C         ;COLOSION ABAJO
  550 0000059C E24DD004        sub              sp,sp,#4
  551 000005A0 E52D5004        push{r5}
  552 000005A4 EBFFFFB7        bl               posicion_abj
  553 000005A8 E28DD004        add              sp,sp,#4
  554 000005AC E49D6004        pop{r6}
  555 000005B0         
  556 000005B0 E5D67000        ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  557 000005B4 E3570020        cmp              r7,#32      ; si r7 == 32
  558 000005B8 02888001        addeq            r8,r8,#1    ;  r8++
  559 000005BC 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  560 000005C0         



ARM Macro Assembler    Page 16 


  561 000005C0         ;COLISION IZQUIERDA
  562 000005C0 E24DD004        sub              sp,sp,#4
  563 000005C4 E52D5004        push{r5}
  564 000005C8 EBFFFF8F        bl               posicion_izq
  565 000005CC E28DD004        add              sp,sp,#4
  566 000005D0 E49D6004        pop{r6}
  567 000005D4         
  568 000005D4 E5D67000        ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  569 000005D8 E3570020        cmp              r7,#32      ; si r7 == 32
  570 000005DC 02888001        addeq            r8,r8,#1    ;  r8++
  571 000005E0 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  572 000005E4         
  573 000005E4         ;DERECHA
  574 000005E4 E24DD004        sub              sp,sp,#4
  575 000005E8 E52D5004        push{r5}
  576 000005EC EBFFFF90        bl               posicion_dch
  577 000005F0 E28DD004        add              sp,sp,#4
  578 000005F4 E49D6004        pop{r6}
  579 000005F8 E5D67000        ldrb             r7,[r6]     ; r7 = r6(el ascii)
                                                            
  580 000005FC E3570020        cmp              r7,#32      ; si r7 == 32
  581 00000600 02888001        addeq            r8,r8,#1    ;  r8++
  582 00000604 04896004        streq            r6,[r9],#4  ;   pos_pos + posic
                                                            iones @ = r6
  583 00000608         
  584 00000608 E3580001        cmp              r8,#1
  585 0000060C 03A06000        moveq            r6,#0
  586 00000610 0A000006        beq              unico
  587 00000614 B3A0A001        movlt            r10,#1
  588 00000618 B58BA01C        strlt            r10,[fp,#28] ; cargas si es gam
                                                            e over en el result
                                                            ado 
  589 0000061C BA000012        blt              fin_mov     ; fin del juego, ha
                                                            y un ganador;METERL
                                                            E RESULTADO
  590 00000620         
  591 00000620 E24DD004        sub              sp,sp,#4    ; añadimos un hueco
                                                             para el resultado
  592 00000624 EBFFFFFE        bl               rand
  593 00000628 E49D7004        pop{r7}                      ; r7 = numero aleat
                                                            orio
  594 0000062C E2076001        and              r6, r7,#1   ; r6  r7 and 1 para
                                                             coger un bit
  595 00000630         
  596 00000630         unico
  597 00000630 E7946106        ldr              r6,[r4,r6,LSL#2] ; r6 = r4[r6] 
                                                            = a la posicion gua
                                                            rdad en streq
  598 00000634 E3A08000        mov              r8,#0       ; r8 = 0
  599 00000638 E5838000        str              r8,[r3]     ; colis = r8
  600 0000063C         
  601 0000063C E3A07000        mov              r7,#0
  602 00000640 E0467005        sub              r7,r6,r5    ; r7 = posicion cor
                                                            regida - posicion i
                                                            nicial = {1,-1,32,-
                                                            32}
  603 00000644 E3570001        cmp              r7,#1       ; si r7 >= 1 solo p



ARM Macro Assembler    Page 17 


                                                            uede ser abajo o de
                                                            recha
  604 00000648 05817000        streq            r7,[r1]     ; posicionx = r7   
                                                            
  605 0000064C 05828000        streq            r8,[r2]     ; posiciony = 0
  606 00000650 C5827000        strgt            r7,[r2]     ; posiciony = r7
  607 00000654 C5818000        strgt            r8,[r1]     ; posicionx = 0
  608 00000658 E3770001        cmp              r7,#-1      ; si r7 <= -1 solo 
                                                            puede ser arriba o 
                                                            izquierda
  609 0000065C 05817000        streq            r7,[r1]     ; posicionx = r7   
                                                            
  610 00000660 05828000        streq            r8,[r2]     ; posiciony = 0
  611 00000664 B5827000        strlt            r7,[r2]     ; posiciony = r7
  612 00000668 B5818000        strlt            r8,[r1]     ; posicionx = 0  
  613 0000066C         
  614 0000066C         
  615 0000066C E35A0001 
                       fin_mov cmp              r10,#1      ; si no es gameover
                                                             r8 != 1
  616 00000670 15806000        strne            r6,[r0]     ;   posicion = r6
  617 00000674 E8BD8FFF        pop{r0-r10,fp,pc}
  618 00000678         
  619 00000678         
  620 00000678         
  621 00000678         RSI_reloj                            ;Rutina de servicio
                                                             a la interrupcion 
                                                            IRQ4 (timer 0)
  622 00000678         ;Cada 0,01 s. llega una peticion de interrupcion
  623 00000678         ;usada la rsi timer de las notas de apoyo como referenci
                       a
  624 00000678         
  625 00000678 E24EE004        sub              lr,lr,#4    ;prologo
  626 0000067C E52DE004        PUSH             {lr}
  627 00000680 E14FE000        mrs              r14,spsr
  628 00000684 E52DE004        PUSH             {r14}
  629 00000688 E321F052        msr              cpsr_c,#2_01010010
  630 0000068C         
  631 0000068C E92D000F        PUSH             {r0-r3}
  632 00000690         
  633 00000690 E59F0270        LDR              r0,=T0_IR   ;EOI: escribir un 1
                                                             en el registro T0_
                                                            IR
  634 00000694 E3A01001        mov              r1,#1
  635 00000698 E5801000        str              r1,[r0]
  636 0000069C         
  637 0000069C E59F0268        ldr              r0,=reloj   ; r0 = @reloj
  638 000006A0 E5901000        ldr              r1,[r0]     ; r1 = reloj
  639 000006A4 E2811001        add              r1,r1,#1    ; r1++
  640 000006A8 E59F2260        ldr              r2,= max    ; r2 = @max
  641 000006AC E5923000        ldr              r3,[r2]     ; r3 = max
  642 000006B0 E1510003        cmp              r1,r3       ; si r1(reloj) == r
                                                            3(max)
  643 000006B4 1A000007        bne              fin_reloj
  644 000006B8 E59F1254        ldr              r1,=velocidad ; r1 = @veolcidad
                                                            
  645 000006BC E5911000        ldr              r1,[r1]     ; r1 = velocidad
  646 000006C0 E1510003        cmp              r1,r3       ; si r1 != r2
  647 000006C4 15821000        strne            r1,[r2]     ;  max = velocidad 



ARM Macro Assembler    Page 18 


                                                            
  648 000006C8         
  649 000006C8         
  650 000006C8 E3A01001        mov              r1,#1       ; r2 = 1
  651 000006CC E59F31F4        ldr              r3,=mover   ;  r3 = @mover
  652 000006D0 E5831000        str              r1,[r3]     ; mover = r1 = 1
  653 000006D4 E3A01000        mov              r1,#0
  654 000006D8         
  655 000006D8 E5801000 
                       fin_reloj
                               str              r1,[r0]     ; reloj = r1
  656 000006DC         
  657 000006DC E8BD000F        POP              {r0-r3}
  658 000006E0         ;epilogo
  659 000006E0 E321F0D2        msr              cpsr_c,#2_11010010
  660 000006E4 E49DE004        POP              {r14}
  661 000006E8 E16FF00E        msr              spsr_fsxc,r14
  662 000006EC E59FE224        LDR              r14,=VICVectAddr
  663 000006F0 E58EE000        str              r14,[r14]
  664 000006F4 E8FD8000        POP              {pc}^
  665 000006F8         
  666 000006F8         
  667 000006F8         RSI_teclado                          ;Rutina de servicio
                                                             a la interrupcion 
                                                            IRQ7 (teclado)
  668 000006F8         ;al pulsar cada tecla llega peticion de interrupcion IRQ
                       7
  669 000006F8         ;usada la rsi teclado de las notas de apoyo como referen
                       cia
  670 000006F8         
  671 000006F8 E24EE004        sub              lr,lr,#4    ;prologo
  672 000006FC E52DE004        PUSH             {lr}
  673 00000700 E14FE000        mrs              r14,spsr
  674 00000704 E52DE004        PUSH             {r14}
  675 00000708 E321F052        msr              cpsr_c,#2_01010010
  676 0000070C E92D003F        PUSH             {r0-r5}
  677 00000710         
  678 00000710 E59F1204        LDR              r1,=R_DAT   ;r1=@R_DATOS teclad
                                                            o
  679 00000714 E5D10000        ldrb             r0,[r1]     ;r0=codigo ASCII te
                                                            cla, al leer se com
                                                            pleta el EOI
  680 00000718 E3500041        cmp              r0,#'A'     ; si r0 >= A saltam
                                                            os a letra
  681 0000071C AA00000B        bge              letra
  682 00000720         
  683 00000720 E59F11EC        LDR              r1,= velocidad 
                                                            ; r1 = @velocidad
  684 00000724 E5912000        ldr              r2,[r1]     ; r2 = velocidad
  685 00000728 E3520001        cmp              r2,#1       ; si r2 == 1
  686 0000072C 0A000003        beq              max_vel     ;  solo puede ir ma
                                                            s lento, se ha alca
                                                            nzado el maximo de 
                                                            velocidad
  687 00000730 E350002B        cmp              r0,#'+'     ; si r0 == 43 = '+'
                                                             
  688 00000734 01A020A2        moveq            r2,r2,lsr#1 ;  r2 = r2/2 para q
                                                            ue se haga un movim
                                                            iento cada menos de



ARM Macro Assembler    Page 19 


                                                            cimas, disminuimos 
                                                            el numero de ticks 
                                                            necesarios para mov
                                                            erse
  689 00000738 E3520080        cmp              r2 ,#128    ; si r2 == 128
  690 0000073C 0A000001        beq              act         ;  solo puede ir má
                                                            s rápido, se ha alc
                                                            anzado el minimo de
                                                             velocidad
  691 00000740 E350002D 
                       max_vel cmp              r0,#'-'     ; si r0 == 45 = '-'
                                                            
  692 00000744 01A02082        moveq            r2,r2,lsl#1 ;  r2 = r2*2 para q
                                                            ue se haga un movim
                                                            iento cada más deci
                                                            mas, aumentamos el 
                                                            numero de ticks nec
                                                            esarios para movers
                                                            e
  693 00000748         
  694 00000748 E5812000 
                       act     str              r2,[r1]     ; max = r2
  695 0000074C EA000043        b                epilogo
  696 00000750         
  697 00000750         ; Tratamiento: paso a mayusculas 
  698 00000750 E3C00020 
                       letra   bic              r0,r0,#2_100000 ; r1 = r0 and n
                                                            ot(00100000) [impor
                                                            tante --> r0 mantie
                                                            ne ascii original d
                                                            e la tecla pulsada]
                                                            
  699 00000754 E3500051        cmp              r0,#81      ; si r1 == 81 = Q
  700 00000758 1A000003        bne              sigue
  701 0000075C         
  702 0000075C E59F1138        LDR              r1,=fin     ;  r1 = @fin
  703 00000760 E3A00001        mov              r0,#1       ; r0 = 1
  704 00000764 E5C10000        strb             r0,[r1]     ;  fin = r0 = 1
  705 00000768 EA00003C        b                epilogo     ;  salta al epilogo
                                                            
  706 0000076C         
  707 0000076C         ;
  708 0000076C E59F1124 
                       sigue   ldr              r1,=newgame
  709 00000770 E5912000        ldr              r2,[r1]
  710 00000774 E3520000        cmp              r2,#0       ; si newgame != 0 -
                                                            -> salto a dinamica
                                                            
  711 00000778 1A000006        bne              dinamica
  712 0000077C         
  713 0000077C E0233003        eor              r3,r3,r3
  714 00000780 E350004E        cmp              r0,#'N'     ; Tratamineto de ne
                                                            w game
  715 00000784 03A03001        moveq            r3,#1       ; si r0 == N o n --
                                                            > r0 = 1(volver a j
                                                            ugar)
  716 00000788 E3500046        cmp              r0,#'F'     ; 
  717 0000078C 03A03002        moveq            r3,#2       ; si r0 == F o f --
                                                            > r0 = 2 (fin del j



ARM Macro Assembler    Page 20 


                                                            uego)
  718 00000790 E5813000        str              r3,[r1]     ; newgame =r0
  719 00000794 EA000031        b                epilogo
  720 00000798         
  721 00000798         
  722 00000798 E0255005 
                       dinamica
                               eor              r5,r5,r5    ; r5 = 0
  723 0000079C E3500049        cmp              r0,#'I'     ; si r0 < I
  724 000007A0 BA000015        blt              p1x         ; salta al movimien
                                                            to en x del p1
  725 000007A4 E350004C        cmp              r0,#'L'     ; si r0 > L
  726 000007A8 CA00001F        bgt              p1y         ;  salta al movimie
                                                            nto en y del p1
  727 000007AC         ; movimiento p2
  728 000007AC E59F1108        ldr              r1,=dir2x   ; r1 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir]
  729 000007B0 E59F2108        ldr              r2,=dir2y   ; r2 = @dir2y
  730 000007B4         
  731 000007B4         ; si r0 == L)(usamos las flags de la ultima comparación)
                       
  732 000007B4 03A03001        moveq            r3,#1       ;  r3 = 1(derecha)
  733 000007B8 03A04000        moveq            r4,#0       ;  r4 = 0
  734 000007BC 03A05001        moveq            r5,#1
  735 000007C0 E350004B        cmp              r0,#'K'     ; si r0 == K-> r3 =
                                                             0
  736 000007C4 03A03000        moveq            r3,#0       ;   r3 = 0
  737 000007C8 03A04001        moveq            r4,#1       ;  r4 = 1(abajo)
  738 000007CC 03A05001        moveq            r5,#1
  739 000007D0 E350004A        cmp              r0,#'J'     ; si r0 == 9(J) 
  740 000007D4 03E03000        moveq            r3,#-1      ;   r3 = -1(izq)
  741 000007D8 03A04000        moveq            r4,#0       ;  r4 = 0
  742 000007DC 03A05001        moveq            r5,#1
  743 000007E0 E3500049        cmp              r0,#'I'     ; si r0 == 8(I)-> r
                                                            3 = 0
  744 000007E4 03A03000        moveq            r3,#0       ;   r3 = 0
  745 000007E8 03E04000        moveq            r4,#-1      ;  r4 = -1(arriba)
  746 000007EC 03A05001        moveq            r5,#1
  747 000007F0         
  748 000007F0 E3550000        cmp              r5,#0       ; si r5 == 1
  749 000007F4 0A000019        beq              epilogo     ; salto a epilogo
  750 000007F8 EA000016        b                act_dir     ; salto a actualiza
                                                            r direcciones
  751 000007FC         
  752 000007FC E59F10AC 
                       p1x     ldr              r1,=dir1x   ; r0 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir e
                                                            n r0]
  753 00000800 E59F20AC        ldr              r2,=dir1y   ; r2 = @dir2y 
  754 00000804 E3A04000        mov              r4,#0       ; r4 = 0 porque dir
                                                            1y siempre va a ser
                                                             0
  755 00000808         
  756 00000808 E3500041        cmp              r0,#'A'     ; si r1 == (A)
  757 0000080C 03E03000        moveq            r3,#-1      ;  r3 = -1(izquierd



ARM Macro Assembler    Page 21 


                                                            a)
  758 00000810 03A05001        moveq            r5,#1
  759 00000814 E3500044        cmp              r0,#'D'     ; si r1 == D)
  760 00000818 03A03001        moveq            r3,#1       ;   r3 = 1 (derecha
                                                            )
  761 0000081C 03A05001        moveq            r5,#1
  762 00000820 E3550000        cmp              r5,#0       ; si r5 == 1
  763 00000824 0A00000D        beq              epilogo     ; salto a epilogo
  764 00000828 EA00000A        b                act_dir     ; salto a actualiza
                                                            r direcciones
  765 0000082C         
  766 0000082C E59F107C 
                       p1y     ldr              r1,=dir1x   ; r1 = @dir2x [ya n
                                                            o necestimos el asc
                                                            ii orginal asi que 
                                                            podemos reescrbir e
                                                            n r0]
  767 00000830 E59F207C        ldr              r2,=dir1y   ; r2 = @dir2y
  768 00000834 E3A03000        mov              r3,#0       ; r3 = 0 porque dir
                                                            1x siempre va a ser
                                                             0
  769 00000838         
  770 00000838 E3500057        cmp              r0,#'W'     ; si r1 == (W)
  771 0000083C 03E04000        moveq            r4,#-1      ;  r4 = -1(arriba)
  772 00000840 03A05001        moveq            r5,#1
  773 00000844 E3500053        cmp              r0,#'S'     ; si r1 == (S)
  774 00000848 03A04001        moveq            r4,#1       ;   r4 = 1 (abajo)
  775 0000084C 03A05001        moveq            r5,#1
  776 00000850 E3550000        cmp              r5,#0       ; si r5 == 0
  777 00000854 0A000001        beq              epilogo     ; salto a epilogo
  778 00000858         
  779 00000858 E5813000 
                       act_dir str              r3,[r1]     ; dir1x/dir2x = r3
  780 0000085C E5824000        str              r4,[r2]     ; dir1y/dir2y = r4
  781 00000860         
  782 00000860 E8BD003F 
                       epilogo POP              {r0-r5}
  783 00000864         
  784 00000864 E321F0D2        msr              cpsr_c,#2_11010010
  785 00000868 E49DE004        POP              {r14}
  786 0000086C E16FF00E        msr              spsr_fsxc,r14
  787 00000870 E59FE0A0        LDR              r14,=VICVectAddr
  788 00000874 E58EE000        str              r14,[r14]
  789 00000878 E8FD8000        POP              {pc}^
  790 0000087C         
  791 0000087C         
  792 0000087C         
  793 0000087C         
  794 0000087C         
  795 0000087C                 END
              FFFFF100 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF010 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 22 


              00000000 
              40007E00 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF014 
              20202020 
              40007FFF 
              E0004000 
              00000000 
              00000000 
              00000000 
              FFFFF030 
              E0010000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\8
39316_874912.d -o.\839316_874912.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 526" --list=.\839316_874912.lst 839316_874912.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

acabar 0000008B

Symbol: acabar
   Definitions
      At line 41 in file 839316_874912.s
   Uses
      At line 280 in file 839316_874912.s
Comment: acabar used once
cabecera 0000004A

Symbol: cabecera
   Definitions
      At line 33 in file 839316_874912.s
   Uses
      At line 105 in file 839316_874912.s
      At line 120 in file 839316_874912.s

colis 00000044

Symbol: colis
   Definitions
      At line 30 in file 839316_874912.s
   Uses
      At line 189 in file 839316_874912.s
      At line 240 in file 839316_874912.s

datos 00000000

Symbol: datos
   Definitions
      At line 1 in file 839316_874912.s
   Uses
      None
Comment: datos unused
dir1x 00000010

Symbol: dir1x
   Definitions
      At line 10 in file 839316_874912.s
   Uses
      At line 143 in file 839316_874912.s
      At line 187 in file 839316_874912.s
      At line 752 in file 839316_874912.s
      At line 766 in file 839316_874912.s

dir1y 00000014

Symbol: dir1y
   Definitions
      At line 11 in file 839316_874912.s
   Uses
      At line 144 in file 839316_874912.s
      At line 188 in file 839316_874912.s
      At line 753 in file 839316_874912.s
      At line 767 in file 839316_874912.s

dir2x 00000018

Symbol: dir2x



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 12 in file 839316_874912.s
   Uses
      At line 160 in file 839316_874912.s
      At line 206 in file 839316_874912.s
      At line 728 in file 839316_874912.s

dir2y 0000001C

Symbol: dir2y
   Definitions
      At line 13 in file 839316_874912.s
   Uses
      At line 161 in file 839316_874912.s
      At line 207 in file 839316_874912.s
      At line 729 in file 839316_874912.s

fin 00000020

Symbol: fin
   Definitions
      At line 14 in file 839316_874912.s
   Uses
      At line 90 in file 839316_874912.s
      At line 171 in file 839316_874912.s
      At line 702 in file 839316_874912.s

game_over 00000069

Symbol: game_over
   Definitions
      At line 37 in file 839316_874912.s
   Uses
      At line 247 in file 839316_874912.s
Comment: game_over used once
marcador 00000048

Symbol: marcador
   Definitions
      At line 31 in file 839316_874912.s
   Uses
      At line 92 in file 839316_874912.s
      At line 111 in file 839316_874912.s
      At line 126 in file 839316_874912.s
      At line 231 in file 839316_874912.s

max 00000004

Symbol: max
   Definitions
      At line 7 in file 839316_874912.s
   Uses
      At line 640 in file 839316_874912.s
Comment: max used once
mensaje_final 0000009A

Symbol: mensaje_final
   Definitions
      At line 43 in file 839316_874912.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 299 in file 839316_874912.s
Comment: mensaje_final used once
mover 0000000C

Symbol: mover
   Definitions
      At line 9 in file 839316_874912.s
   Uses
      At line 172 in file 839316_874912.s
      At line 651 in file 839316_874912.s

newgame 000000A0

Symbol: newgame
   Definitions
      At line 46 in file 839316_874912.s
   Uses
      At line 87 in file 839316_874912.s
      At line 287 in file 839316_874912.s
      At line 291 in file 839316_874912.s
      At line 708 in file 839316_874912.s

pantalla_fin 00000057

Symbol: pantalla_fin
   Definitions
      At line 35 in file 839316_874912.s
   Uses
      At line 259 in file 839316_874912.s
Comment: pantalla_fin used once
pos_pos 00000038

Symbol: pos_pos
   Definitions
      At line 29 in file 839316_874912.s
   Uses
      At line 190 in file 839316_874912.s
Comment: pos_pos used once
posicion1 00000030

Symbol: posicion1
   Definitions
      At line 27 in file 839316_874912.s
   Uses
      At line 145 in file 839316_874912.s
      At line 186 in file 839316_874912.s

posicion2 00000034

Symbol: posicion2
   Definitions
      At line 28 in file 839316_874912.s
   Uses
      At line 162 in file 839316_874912.s
      At line 205 in file 839316_874912.s

reloj 00000000




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: reloj
   Definitions
      At line 6 in file 839316_874912.s
   Uses
      At line 637 in file 839316_874912.s
Comment: reloj used once
reloj_so 00000024

Symbol: reloj_so
   Definitions
      At line 24 in file 839316_874912.s
   Uses
      At line 57 in file 839316_874912.s
      At line 313 in file 839316_874912.s

semilla 0000002C

Symbol: semilla
   Definitions
      At line 26 in file 839316_874912.s
   Uses
      At line 80 in file 839316_874912.s
Comment: semilla used once
tam_a 00000099

Symbol: tam_a
   Definitions
      At line 42 in file 839316_874912.s
   Uses
      At line 281 in file 839316_874912.s
Comment: tam_a used once
tam_cab 00000056

Symbol: tam_cab
   Definitions
      At line 34 in file 839316_874912.s
   Uses
      At line 106 in file 839316_874912.s
      At line 121 in file 839316_874912.s

tam_go 00000073

Symbol: tam_go
   Definitions
      At line 38 in file 839316_874912.s
   Uses
      At line 248 in file 839316_874912.s
Comment: tam_go used once
tam_mf 0000009E

Symbol: tam_mf
   Definitions
      At line 44 in file 839316_874912.s
   Uses
      At line 301 in file 839316_874912.s
Comment: tam_mf used once
tam_pf 00000068

Symbol: tam_pf



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 36 in file 839316_874912.s
   Uses
      At line 260 in file 839316_874912.s
Comment: tam_pf used once
tam_vj 0000008A

Symbol: tam_vj
   Definitions
      At line 40 in file 839316_874912.s
   Uses
      At line 273 in file 839316_874912.s
Comment: tam_vj used once
teclado_so 00000028

Symbol: teclado_so
   Definitions
      At line 25 in file 839316_874912.s
   Uses
      At line 63 in file 839316_874912.s
      At line 318 in file 839316_874912.s

velocidad 00000008

Symbol: velocidad
   Definitions
      At line 8 in file 839316_874912.s
   Uses
      At line 644 in file 839316_874912.s
      At line 683 in file 839316_874912.s

volver_jugar 00000074

Symbol: volver_jugar
   Definitions
      At line 39 in file 839316_874912.s
   Uses
      At line 272 in file 839316_874912.s
Comment: volver_jugar used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RSI_reloj 00000678

Symbol: RSI_reloj
   Definitions
      At line 621 in file 839316_874912.s
   Uses
      At line 69 in file 839316_874912.s
Comment: RSI_reloj used once
RSI_teclado 000006F8

Symbol: RSI_teclado
   Definitions
      At line 667 in file 839316_874912.s
   Uses
      At line 72 in file 839316_874912.s
Comment: RSI_teclado used once
abajo 0000054C

Symbol: abajo
   Definitions
      At line 517 in file 839316_874912.s
   Uses
      At line 486 in file 839316_874912.s
Comment: abajo used once
acabo 00000290

Symbol: acabo
   Definitions
      At line 270 in file 839316_874912.s
   Uses
      At line 177 in file 839316_874912.s
Comment: acabo used once
act 00000748

Symbol: act
   Definitions
      At line 694 in file 839316_874912.s
   Uses
      At line 690 in file 839316_874912.s
Comment: act used once
act_dir 00000858

Symbol: act_dir
   Definitions
      At line 779 in file 839316_874912.s
   Uses
      At line 750 in file 839316_874912.s
      At line 764 in file 839316_874912.s

arriba 00000534

Symbol: arriba
   Definitions
      At line 509 in file 839316_874912.s
   Uses
      At line 485 in file 839316_874912.s
Comment: arriba used once
bfin 00000338




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: bfin
   Definitions
      At line 323 in file 839316_874912.s
   Uses
      At line 323 in file 839316_874912.s
Comment: bfin used once
borra 00000380

Symbol: borra
   Definitions
      At line 350 in file 839316_874912.s
   Uses
      At line 352 in file 839316_874912.s
Comment: borra used once
borra_pant 00000368

Symbol: borra_pant
   Definitions
      At line 342 in file 839316_874912.s
   Uses
      At line 101 in file 839316_874912.s
      At line 176 in file 839316_874912.s
      At line 230 in file 839316_874912.s
      At line 298 in file 839316_874912.s

bucle 00000170

Symbol: bucle
   Definitions
      At line 174 in file 839316_874912.s
   Uses
      At line 181 in file 839316_874912.s
      At line 228 in file 839316_874912.s

codigo 00000000

Symbol: codigo
   Definitions
      At line 50 in file 839316_874912.s
   Uses
      None
Comment: codigo unused
colision 00000560

Symbol: colision
   Definitions
      At line 527 in file 839316_874912.s
   Uses
      At line 500 in file 839316_874912.s
      At line 507 in file 839316_874912.s
      At line 515 in file 839316_874912.s

dch 0000051C

Symbol: dch
   Definitions
      At line 502 in file 839316_874912.s
   Uses
      At line 481 in file 839316_874912.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: dch used once
desactivar 00000308

Symbol: desactivar
   Definitions
      At line 308 in file 839316_874912.s
   Uses
      At line 255 in file 839316_874912.s
Comment: desactivar used once
dinamica 00000798

Symbol: dinamica
   Definitions
      At line 722 in file 839316_874912.s
   Uses
      At line 711 in file 839316_874912.s
Comment: dinamica used once
epilogo 00000860

Symbol: epilogo
   Definitions
      At line 782 in file 839316_874912.s
   Uses
      At line 695 in file 839316_874912.s
      At line 705 in file 839316_874912.s
      At line 719 in file 839316_874912.s
      At line 749 in file 839316_874912.s
      At line 763 in file 839316_874912.s
      At line 777 in file 839316_874912.s

escribir 00000354

Symbol: escribir
   Definitions
      At line 335 in file 839316_874912.s
   Uses
      At line 338 in file 839316_874912.s
Comment: escribir used once
fin_mov 0000066C

Symbol: fin_mov
   Definitions
      At line 615 in file 839316_874912.s
   Uses
      At line 490 in file 839316_874912.s
      At line 531 in file 839316_874912.s
      At line 589 in file 839316_874912.s

fin_reloj 000006D8

Symbol: fin_reloj
   Definitions
      At line 655 in file 839316_874912.s
   Uses
      At line 643 in file 839316_874912.s
Comment: fin_reloj used once
gameover 00000210

Symbol: gameover



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 229 in file 839316_874912.s
   Uses
      At line 199 in file 839316_874912.s
      At line 216 in file 839316_874912.s

gandor 0000026C

Symbol: gandor
   Definitions
      At line 257 in file 839316_874912.s
   Uses
      None
Comment: gandor unused
imp_mensaje 0000033C

Symbol: imp_mensaje
   Definitions
      At line 325 in file 839316_874912.s
   Uses
      At line 116 in file 839316_874912.s
      At line 131 in file 839316_874912.s
      At line 252 in file 839316_874912.s
      At line 267 in file 839316_874912.s
      At line 276 in file 839316_874912.s
      At line 284 in file 839316_874912.s
      At line 305 in file 839316_874912.s

infinito 000002D8

Symbol: infinito
   Definitions
      At line 291 in file 839316_874912.s
   Uses
      At line 295 in file 839316_874912.s
Comment: infinito used once
inicio 00000000

Symbol: inicio
   Definitions
      At line 55 in file 839316_874912.s
   Uses
      At line 51 in file 839316_874912.s
Comment: inicio used once
izq 00000504

Symbol: izq
   Definitions
      At line 494 in file 839316_874912.s
   Uses
      At line 480 in file 839316_874912.s
Comment: izq used once
jugador1 0000018C

Symbol: jugador1
   Definitions
      At line 186 in file 839316_874912.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Comment: jugador1 unused
jugador2 000001CC

Symbol: jugador2
   Definitions
      At line 205 in file 839316_874912.s
   Uses
      None
Comment: jugador2 unused
letra 00000750

Symbol: letra
   Definitions
      At line 698 in file 839316_874912.s
   Uses
      At line 681 in file 839316_874912.s
Comment: letra used once
max_vel 00000740

Symbol: max_vel
   Definitions
      At line 691 in file 839316_874912.s
   Uses
      At line 686 in file 839316_874912.s
Comment: max_vel used once
mov_ini 000003E8

Symbol: mov_ini
   Definitions
      At line 387 in file 839316_874912.s
   Uses
      At line 369 in file 839316_874912.s
      At line 374 in file 839316_874912.s
      At line 381 in file 839316_874912.s

movimiento 000004B4

Symbol: movimiento
   Definitions
      At line 462 in file 839316_874912.s
   Uses
      At line 194 in file 839316_874912.s
      At line 211 in file 839316_874912.s

newrun 00000060

Symbol: newrun
   Definitions
      At line 86 in file 839316_874912.s
   Uses
      At line 294 in file 839316_874912.s
Comment: newrun used once
p1x 000007FC

Symbol: p1x
   Definitions
      At line 752 in file 839316_874912.s
   Uses
      At line 724 in file 839316_874912.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: p1x used once
p1y 0000082C

Symbol: p1y
   Definitions
      At line 766 in file 839316_874912.s
   Uses
      At line 726 in file 839316_874912.s
Comment: p1y used once
posicion_abj 00000488

Symbol: posicion_abj
   Definitions
      At line 447 in file 839316_874912.s
   Uses
      At line 519 in file 839316_874912.s
      At line 552 in file 839316_874912.s

posicion_arrb 0000045C

Symbol: posicion_arrb
   Definitions
      At line 431 in file 839316_874912.s
   Uses
      At line 512 in file 839316_874912.s
      At line 540 in file 839316_874912.s

posicion_dch 00000434

Symbol: posicion_dch
   Definitions
      At line 416 in file 839316_874912.s
   Uses
      At line 504 in file 839316_874912.s
      At line 576 in file 839316_874912.s

posicion_izq 0000040C

Symbol: posicion_izq
   Definitions
      At line 401 in file 839316_874912.s
   Uses
      At line 497 in file 839316_874912.s
      At line 564 in file 839316_874912.s

rerun 00000088

Symbol: rerun
   Definitions
      At line 101 in file 839316_874912.s
   Uses
      At line 243 in file 839316_874912.s
Comment: rerun used once
sigue 0000076C

Symbol: sigue
   Definitions
      At line 708 in file 839316_874912.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 700 in file 839316_874912.s
Comment: sigue used once
tab_inicial 00000390

Symbol: tab_inicial
   Definitions
      At line 357 in file 839316_874912.s
   Uses
      At line 149 in file 839316_874912.s
      At line 166 in file 839316_874912.s

unico 00000630

Symbol: unico
   Definitions
      At line 596 in file 839316_874912.s
   Uses
      At line 586 in file 839316_874912.s
Comment: unico used once
43 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABAJO 40007FFF

Symbol: ABAJO
   Definitions
      At line 18 in file 839316_874912.s
   Uses
      At line 454 in file 839316_874912.s
Comment: ABAJO used once
ARRIBA 40007E00

Symbol: ARRIBA
   Definitions
      At line 17 in file 839316_874912.s
   Uses
      At line 102 in file 839316_874912.s
      At line 245 in file 839316_874912.s
      At line 270 in file 839316_874912.s
      At line 346 in file 839316_874912.s
      At line 389 in file 839316_874912.s
      At line 439 in file 839316_874912.s

R_DAT E0010000

Symbol: R_DAT
   Definitions
      At line 15 in file 839316_874912.s
   Uses
      At line 678 in file 839316_874912.s
Comment: R_DAT used once
T0_IR E0004000

Symbol: T0_IR
   Definitions
      At line 16 in file 839316_874912.s
   Uses
      At line 633 in file 839316_874912.s
Comment: T0_IR used once
VACIO 20202020

Symbol: VACIO
   Definitions
      At line 23 in file 839316_874912.s
   Uses
      At line 347 in file 839316_874912.s
Comment: VACIO used once
VICIntEnClr FFFFF014

Symbol: VICIntEnClr
   Definitions
      At line 20 in file 839316_874912.s
   Uses
      At line 308 in file 839316_874912.s
Comment: VICIntEnClr used once
VICIntEnable FFFFF010

Symbol: VICIntEnable
   Definitions
      At line 19 in file 839316_874912.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 76 in file 839316_874912.s
Comment: VICIntEnable used once
VICVectAddr FFFFF030

Symbol: VICVectAddr
   Definitions
      At line 22 in file 839316_874912.s
   Uses
      At line 662 in file 839316_874912.s
      At line 787 in file 839316_874912.s

VICVectAddr0 FFFFF100

Symbol: VICVectAddr0
   Definitions
      At line 21 in file 839316_874912.s
   Uses
      At line 56 in file 839316_874912.s
      At line 62 in file 839316_874912.s
      At line 312 in file 839316_874912.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rand 00000000

Symbol: rand
   Definitions
      At line 53 in file 839316_874912.s
   Uses
      At line 137 in file 839316_874912.s
      At line 154 in file 839316_874912.s
      At line 592 in file 839316_874912.s

srand 00000000

Symbol: srand
   Definitions
      At line 52 in file 839316_874912.s
   Uses
      At line 83 in file 839316_874912.s
Comment: srand used once
2 symbols
419 symbols in table
